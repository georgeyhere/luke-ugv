
chatter_f767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ae0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008044  08008044  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008044  08008044  00018044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800804c  0800804c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800804c  0800804c  0001804c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008054  08008054  00018054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c38  20000074  080080cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cac  080080cc  00020cac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e5fd  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033df  00000000  00000000  0003e69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00041a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  00042e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a949  00000000  00000000  000441a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001898f  00000000  00000000  0006eae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104939  00000000  00000000  00087478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018bdb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a90  00000000  00000000  0018be04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000074 	.word	0x20000074
 8000214:	00000000 	.word	0x00000000
 8000218:	08007cc0 	.word	0x08007cc0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000078 	.word	0x20000078
 8000234:	08007cc0 	.word	0x08007cc0

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f002 feb1 	bl	80032b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f810 	bl	8000578 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f9fe 	bl	8000958 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 800055c:	f000 f9a2 	bl	80008a4 <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 8000560:	f000 f888 	bl	8000674 <_ZL12MX_I2C1_Initv>
  MX_DMA_Init();
 8000564:	f000 f9d2 	bl	800090c <_ZL11MX_DMA_Initv>
  MX_TIM2_Init();
 8000568:	f000 f8d2 	bl	8000710 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
	setup();
 800056c:	f001 fd0c 	bl	8001f88 <_Z5setupv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
		loop();
 8000570:	f001 fd2a 	bl	8001fc8 <_Z4loopv>
 8000574:	e7fc      	b.n	8000570 <main+0x24>
	...

08000578 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2234      	movs	r2, #52	; 0x34
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f007 fa10 	bl	80079ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	4b33      	ldr	r3, [pc, #204]	; (800066c <_Z18SystemClock_Configv+0xf4>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a32      	ldr	r2, [pc, #200]	; (800066c <_Z18SystemClock_Configv+0xf4>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b30      	ldr	r3, [pc, #192]	; (800066c <_Z18SystemClock_Configv+0xf4>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <_Z18SystemClock_Configv+0xf8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a2d      	ldr	r2, [pc, #180]	; (8000670 <_Z18SystemClock_Configv+0xf8>)
 80005ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <_Z18SystemClock_Configv+0xf8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 13;
 80005e0:	230d      	movs	r3, #13
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005e4:	23d8      	movs	r3, #216	; 0xd8
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80005ec:	2309      	movs	r3, #9
 80005ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4618      	mov	r0, r3
 80005fa:	f003 ff13 	bl	8004424 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	bf14      	ite	ne
 8000604:	2301      	movne	r3, #1
 8000606:	2300      	moveq	r3, #0
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <_Z18SystemClock_Configv+0x9a>
  {
    Error_Handler();
 800060e:	f000 fac7 	bl	8000ba0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000612:	f003 feb7 	bl	8004384 <HAL_PWREx_EnableOverDrive>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	bf14      	ite	ne
 800061c:	2301      	movne	r3, #1
 800061e:	2300      	moveq	r3, #0
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 8000626:	f000 fabb 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000636:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	2107      	movs	r1, #7
 8000648:	4618      	mov	r0, r3
 800064a:	f004 f999 	bl	8004980 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	bf14      	ite	ne
 8000654:	2301      	movne	r3, #1
 8000656:	2300      	moveq	r3, #0
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <_Z18SystemClock_Configv+0xea>
  {
    Error_Handler();
 800065e:	f000 fa9f 	bl	8000ba0 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <_ZL12MX_I2C1_Initv+0x90>)
 800067a:	4a23      	ldr	r2, [pc, #140]	; (8000708 <_ZL12MX_I2C1_Initv+0x94>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <_ZL12MX_I2C1_Initv+0x90>)
 8000680:	4a22      	ldr	r2, [pc, #136]	; (800070c <_ZL12MX_I2C1_Initv+0x98>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <_ZL12MX_I2C1_Initv+0x90>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <_ZL12MX_I2C1_Initv+0x90>)
 800068c:	2201      	movs	r2, #1
 800068e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <_ZL12MX_I2C1_Initv+0x90>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <_ZL12MX_I2C1_Initv+0x90>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800069c:	4b19      	ldr	r3, [pc, #100]	; (8000704 <_ZL12MX_I2C1_Initv+0x90>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <_ZL12MX_I2C1_Initv+0x90>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <_ZL12MX_I2C1_Initv+0x90>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ae:	4815      	ldr	r0, [pc, #84]	; (8000704 <_ZL12MX_I2C1_Initv+0x90>)
 80006b0:	f003 fd40 	bl	8004134 <HAL_I2C_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	bf14      	ite	ne
 80006ba:	2301      	movne	r3, #1
 80006bc:	2300      	moveq	r3, #0
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 80006c4:	f000 fa6c 	bl	8000ba0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c8:	2100      	movs	r1, #0
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <_ZL12MX_I2C1_Initv+0x90>)
 80006cc:	f003 fdc2 	bl	8004254 <HAL_I2CEx_ConfigAnalogFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	bf14      	ite	ne
 80006d6:	2301      	movne	r3, #1
 80006d8:	2300      	moveq	r3, #0
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80006e0:	f000 fa5e 	bl	8000ba0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <_ZL12MX_I2C1_Initv+0x90>)
 80006e8:	f003 fdff 	bl	80042ea <HAL_I2CEx_ConfigDigitalFilter>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	bf14      	ite	ne
 80006f2:	2301      	movne	r3, #1
 80006f4:	2300      	moveq	r3, #0
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80006fc:	f000 fa50 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000090 	.word	0x20000090
 8000708:	40005400 	.word	0x40005400
 800070c:	6000030d 	.word	0x6000030d

08000710 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	; 0x38
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
 800073e:	615a      	str	r2, [r3, #20]
 8000740:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000742:	4b56      	ldr	r3, [pc, #344]	; (800089c <_ZL12MX_TIM2_Initv+0x18c>)
 8000744:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000748:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800074a:	4b54      	ldr	r3, [pc, #336]	; (800089c <_ZL12MX_TIM2_Initv+0x18c>)
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000750:	4b52      	ldr	r3, [pc, #328]	; (800089c <_ZL12MX_TIM2_Initv+0x18c>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000756:	4b51      	ldr	r3, [pc, #324]	; (800089c <_ZL12MX_TIM2_Initv+0x18c>)
 8000758:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800075c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075e:	4b4f      	ldr	r3, [pc, #316]	; (800089c <_ZL12MX_TIM2_Initv+0x18c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000764:	4b4d      	ldr	r3, [pc, #308]	; (800089c <_ZL12MX_TIM2_Initv+0x18c>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800076a:	484c      	ldr	r0, [pc, #304]	; (800089c <_ZL12MX_TIM2_Initv+0x18c>)
 800076c:	f004 ff16 	bl	800559c <HAL_TIM_Base_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf14      	ite	ne
 8000776:	2301      	movne	r3, #1
 8000778:	2300      	moveq	r3, #0
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8000780:	f000 fa0e 	bl	8000ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800078a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078e:	4619      	mov	r1, r3
 8000790:	4842      	ldr	r0, [pc, #264]	; (800089c <_ZL12MX_TIM2_Initv+0x18c>)
 8000792:	f005 f8cf 	bl	8005934 <HAL_TIM_ConfigClockSource>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	bf14      	ite	ne
 800079c:	2301      	movne	r3, #1
 800079e:	2300      	moveq	r3, #0
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 80007a6:	f000 f9fb 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007aa:	483c      	ldr	r0, [pc, #240]	; (800089c <_ZL12MX_TIM2_Initv+0x18c>)
 80007ac:	f004 ff4d 	bl	800564a <HAL_TIM_PWM_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	bf14      	ite	ne
 80007b6:	2301      	movne	r3, #1
 80007b8:	2300      	moveq	r3, #0
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 80007c0:	f000 f9ee 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	4832      	ldr	r0, [pc, #200]	; (800089c <_ZL12MX_TIM2_Initv+0x18c>)
 80007d4:	f005 fd10 	bl	80061f8 <HAL_TIMEx_MasterConfigSynchronization>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	bf14      	ite	ne
 80007de:	2301      	movne	r3, #1
 80007e0:	2300      	moveq	r3, #0
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 80007e8:	f000 f9da 	bl	8000ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ec:	2360      	movs	r3, #96	; 0x60
 80007ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 36000-1;
 80007f0:	f648 439f 	movw	r3, #35999	; 0x8c9f
 80007f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007fe:	463b      	mov	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	4619      	mov	r1, r3
 8000804:	4825      	ldr	r0, [pc, #148]	; (800089c <_ZL12MX_TIM2_Initv+0x18c>)
 8000806:	f004 ff81 	bl	800570c <HAL_TIM_PWM_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	bf14      	ite	ne
 8000810:	2301      	movne	r3, #1
 8000812:	2300      	moveq	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 800081a:	f000 f9c1 	bl	8000ba0 <Error_Handler>
  }
  sConfigOC.Pulse = 999;
 800081e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000822:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	2204      	movs	r2, #4
 8000828:	4619      	mov	r1, r3
 800082a:	481c      	ldr	r0, [pc, #112]	; (800089c <_ZL12MX_TIM2_Initv+0x18c>)
 800082c:	f004 ff6e 	bl	800570c <HAL_TIM_PWM_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	bf14      	ite	ne
 8000836:	2301      	movne	r3, #1
 8000838:	2300      	moveq	r3, #0
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <_ZL12MX_TIM2_Initv+0x134>
  {
    Error_Handler();
 8000840:	f000 f9ae 	bl	8000ba0 <Error_Handler>
  }
  sConfigOC.Pulse = 58545;
 8000844:	f24e 43b1 	movw	r3, #58545	; 0xe4b1
 8000848:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	2208      	movs	r2, #8
 800084e:	4619      	mov	r1, r3
 8000850:	4812      	ldr	r0, [pc, #72]	; (800089c <_ZL12MX_TIM2_Initv+0x18c>)
 8000852:	f004 ff5b 	bl	800570c <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	bf14      	ite	ne
 800085c:	2301      	movne	r3, #1
 800085e:	2300      	moveq	r3, #0
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <_ZL12MX_TIM2_Initv+0x15a>
  {
    Error_Handler();
 8000866:	f000 f99b 	bl	8000ba0 <Error_Handler>
  }
  sConfigOC.Pulse = 787984;
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <_ZL12MX_TIM2_Initv+0x190>)
 800086c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	220c      	movs	r2, #12
 8000872:	4619      	mov	r1, r3
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <_ZL12MX_TIM2_Initv+0x18c>)
 8000876:	f004 ff49 	bl	800570c <HAL_TIM_PWM_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf14      	ite	ne
 8000880:	2301      	movne	r3, #1
 8000882:	2300      	moveq	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <_ZL12MX_TIM2_Initv+0x17e>
  {
    Error_Handler();
 800088a:	f000 f989 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800088e:	4803      	ldr	r0, [pc, #12]	; (800089c <_ZL12MX_TIM2_Initv+0x18c>)
 8000890:	f002 faea 	bl	8002e68 <HAL_TIM_MspPostInit>

}
 8000894:	bf00      	nop
 8000896:	3738      	adds	r7, #56	; 0x38
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000e4 	.word	0x200000e4
 80008a0:	000c0610 	.word	0x000c0610

080008a4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <_ZL19MX_USART3_UART_Initv+0x64>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e6:	4807      	ldr	r0, [pc, #28]	; (8000904 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008e8:	f005 fd14 	bl	8006314 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bf14      	ite	ne
 80008f2:	2301      	movne	r3, #1
 80008f4:	2300      	moveq	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 80008fc:	f000 f950 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000130 	.word	0x20000130
 8000908:	40004800 	.word	0x40004800

0800090c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <_ZL11MX_DMA_Initv+0x48>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <_ZL11MX_DMA_Initv+0x48>)
 8000918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <_ZL11MX_DMA_Initv+0x48>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	200c      	movs	r0, #12
 8000930:	f002 fdf9 	bl	8003526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000934:	200c      	movs	r0, #12
 8000936:	f002 fe12 	bl	800355e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	200e      	movs	r0, #14
 8000940:	f002 fdf1 	bl	8003526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000944:	200e      	movs	r0, #14
 8000946:	f002 fe0a 	bl	800355e <HAL_NVIC_EnableIRQ>

}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b86      	ldr	r3, [pc, #536]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a85      	ldr	r2, [pc, #532]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b83      	ldr	r3, [pc, #524]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000986:	4b80      	ldr	r3, [pc, #512]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a7f      	ldr	r2, [pc, #508]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 800098c:	f043 0320 	orr.w	r3, r3, #32
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b7d      	ldr	r3, [pc, #500]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0320 	and.w	r3, r3, #32
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	4b7a      	ldr	r3, [pc, #488]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a79      	ldr	r2, [pc, #484]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b77      	ldr	r3, [pc, #476]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b74      	ldr	r3, [pc, #464]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a73      	ldr	r2, [pc, #460]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b71      	ldr	r3, [pc, #452]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b6e      	ldr	r3, [pc, #440]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a6d      	ldr	r2, [pc, #436]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b6b      	ldr	r3, [pc, #428]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e6:	4b68      	ldr	r3, [pc, #416]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a67      	ldr	r2, [pc, #412]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b65      	ldr	r3, [pc, #404]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009fe:	4b62      	ldr	r3, [pc, #392]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a61      	ldr	r2, [pc, #388]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 8000a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b5f      	ldr	r3, [pc, #380]	; (8000b88 <_ZL12MX_GPIO_Initv+0x230>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	210f      	movs	r1, #15
 8000a1a:	485c      	ldr	r0, [pc, #368]	; (8000b8c <_ZL12MX_GPIO_Initv+0x234>)
 8000a1c:	f003 fb70 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a26:	485a      	ldr	r0, [pc, #360]	; (8000b90 <_ZL12MX_GPIO_Initv+0x238>)
 8000a28:	f003 fb6a 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2140      	movs	r1, #64	; 0x40
 8000a30:	4858      	ldr	r0, [pc, #352]	; (8000b94 <_ZL12MX_GPIO_Initv+0x23c>)
 8000a32:	f003 fb65 	bl	8004100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4852      	ldr	r0, [pc, #328]	; (8000b98 <_ZL12MX_GPIO_Initv+0x240>)
 8000a4e:	f003 f9ab 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a52:	230f      	movs	r3, #15
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4848      	ldr	r0, [pc, #288]	; (8000b8c <_ZL12MX_GPIO_Initv+0x234>)
 8000a6a:	f003 f99d 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a6e:	2332      	movs	r3, #50	; 0x32
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a7e:	230b      	movs	r3, #11
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4843      	ldr	r0, [pc, #268]	; (8000b98 <_ZL12MX_GPIO_Initv+0x240>)
 8000a8a:	f003 f98d 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a8e:	2386      	movs	r3, #134	; 0x86
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a9e:	230b      	movs	r3, #11
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	483c      	ldr	r0, [pc, #240]	; (8000b9c <_ZL12MX_GPIO_Initv+0x244>)
 8000aaa:	f003 f97d 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aae:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4832      	ldr	r0, [pc, #200]	; (8000b90 <_ZL12MX_GPIO_Initv+0x238>)
 8000ac8:	f003 f96e 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ade:	230b      	movs	r3, #11
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4829      	ldr	r0, [pc, #164]	; (8000b90 <_ZL12MX_GPIO_Initv+0x238>)
 8000aea:	f003 f95d 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aee:	2340      	movs	r3, #64	; 0x40
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4823      	ldr	r0, [pc, #140]	; (8000b94 <_ZL12MX_GPIO_Initv+0x23c>)
 8000b06:	f003 f94f 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	481d      	ldr	r0, [pc, #116]	; (8000b94 <_ZL12MX_GPIO_Initv+0x23c>)
 8000b1e:	f003 f943 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b22:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b34:	230a      	movs	r3, #10
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4817      	ldr	r0, [pc, #92]	; (8000b9c <_ZL12MX_GPIO_Initv+0x244>)
 8000b40:	f003 f932 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4810      	ldr	r0, [pc, #64]	; (8000b9c <_ZL12MX_GPIO_Initv+0x244>)
 8000b5a:	f003 f925 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b5e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b70:	230b      	movs	r3, #11
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4806      	ldr	r0, [pc, #24]	; (8000b94 <_ZL12MX_GPIO_Initv+0x23c>)
 8000b7c:	f003 f914 	bl	8003da8 <HAL_GPIO_Init>

}
 8000b80:	bf00      	nop
 8000b82:	3730      	adds	r7, #48	; 0x30
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40021400 	.word	0x40021400
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40021800 	.word	0x40021800
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>

08000baa <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <_ZN3ros3MsgC1Ev+0x1c>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	08008014 	.word	0x08008014

08000bec <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
      data()
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ffe8 	bl	8000bcc <_ZN3ros3MsgC1Ev>
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3304      	adds	r3, #4
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ffcf 	bl	8000baa <_ZN3ros4TimeC1Ev>
    {
    }
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	08007ffc 	.word	0x08007ffc

08000c1c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6859      	ldr	r1, [r3, #4]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	b2ca      	uxtb	r2, r1
 8000c36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	0a19      	lsrs	r1, r3, #8
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	3301      	adds	r3, #1
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	4413      	add	r3, r2
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	0c19      	lsrs	r1, r3, #16
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	3302      	adds	r3, #2
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	b2ca      	uxtb	r2, r1
 8000c5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	0e19      	lsrs	r1, r3, #24
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	3303      	adds	r3, #3
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	4413      	add	r3, r2
 8000c6a:	b2ca      	uxtb	r2, r1
 8000c6c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	3304      	adds	r3, #4
 8000c72:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6899      	ldr	r1, [r3, #8]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b2ca      	uxtb	r2, r1
 8000c80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	0a19      	lsrs	r1, r3, #8
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	b2ca      	uxtb	r2, r1
 8000c92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	0c19      	lsrs	r1, r3, #16
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	b2ca      	uxtb	r2, r1
 8000ca4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	0e19      	lsrs	r1, r3, #24
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3303      	adds	r3, #3
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b2ca      	uxtb	r2, r1
 8000cb6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	3304      	adds	r3, #4
 8000cbc:	60fb      	str	r3, [r7, #12]
      return offset;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
    }
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	6839      	ldr	r1, [r7, #0]
 8000cf2:	440b      	add	r3, r1
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	021b      	lsls	r3, r3, #8
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3302      	adds	r3, #2
 8000d06:	6839      	ldr	r1, [r7, #0]
 8000d08:	440b      	add	r3, r1
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	041b      	lsls	r3, r3, #16
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3303      	adds	r3, #3
 8000d1c:	6839      	ldr	r1, [r7, #0]
 8000d1e:	440b      	add	r3, r1
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	061b      	lsls	r3, r3, #24
 8000d24:	431a      	orrs	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3301      	adds	r3, #1
 8000d46:	6839      	ldr	r1, [r7, #0]
 8000d48:	440b      	add	r3, r1
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	6839      	ldr	r1, [r7, #0]
 8000d5e:	440b      	add	r3, r1
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	041b      	lsls	r3, r3, #16
 8000d64:	431a      	orrs	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3303      	adds	r3, #3
 8000d72:	6839      	ldr	r1, [r7, #0]
 8000d74:	440b      	add	r3, r1
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	061b      	lsls	r3, r3, #24
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	3304      	adds	r3, #4
 8000d84:	60fb      	str	r3, [r7, #12]
     return offset;
 8000d86:	68fb      	ldr	r3, [r7, #12]
    }
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	08007cd8 	.word	0x08007cd8

08000db0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	08007ce8 	.word	0x08007ce8

08000dcc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fef8 	bl	8000bcc <_ZN3ros3MsgC1Ev>
 8000ddc:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	809a      	strh	r2, [r3, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000df8:	611a      	str	r2, [r3, #16]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	615a      	str	r2, [r3, #20]
    {
    }
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	08007fe4 	.word	0x08007fe4
 8000e10:	08007d0c 	.word	0x08007d0c

08000e14 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	8899      	ldrh	r1, [r3, #4]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b2ca      	uxtb	r2, r1
 8000e2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	889b      	ldrh	r3, [r3, #4]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	b299      	uxth	r1, r3
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	b2ca      	uxtb	r2, r1
 8000e42:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	3302      	adds	r3, #2
 8000e48:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff f9f2 	bl	8000238 <strlen>
 8000e54:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	69b9      	ldr	r1, [r7, #24]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 f912 	bl	8002088 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	3304      	adds	r3, #4
 8000e68:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	18d0      	adds	r0, r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4619      	mov	r1, r3
 8000e78:	f006 fd8a 	bl	8007990 <memcpy>
      offset += length_topic_name;
 8000e7c:	69fa      	ldr	r2, [r7, #28]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	4413      	add	r3, r2
 8000e82:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff f9d5 	bl	8000238 <strlen>
 8000e8e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	4413      	add	r3, r2
 8000e96:	6979      	ldr	r1, [r7, #20]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 f8f5 	bl	8002088 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	18d0      	adds	r0, r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f006 fd6d 	bl	8007990 <memcpy>
      offset += length_message_type;
 8000eb6:	69fa      	ldr	r2, [r7, #28]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	4413      	add	r3, r2
 8000ebc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff f9b8 	bl	8000238 <strlen>
 8000ec8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	6939      	ldr	r1, [r7, #16]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 f8d8 	bl	8002088 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	3304      	adds	r3, #4
 8000edc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	18d0      	adds	r0, r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4619      	mov	r1, r3
 8000eec:	f006 fd50 	bl	8007990 <memcpy>
      offset += length_md5sum;
 8000ef0:	69fa      	ldr	r2, [r7, #28]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000efe:	68f9      	ldr	r1, [r7, #12]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	4413      	add	r3, r2
 8000f06:	b2ca      	uxtb	r2, r1
 8000f08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	0a19      	lsrs	r1, r3, #8
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3301      	adds	r3, #1
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	b2ca      	uxtb	r2, r1
 8000f18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	0c19      	lsrs	r1, r3, #16
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3302      	adds	r3, #2
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	4413      	add	r3, r2
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	0e19      	lsrs	r1, r3, #24
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3303      	adds	r3, #3
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	b2ca      	uxtb	r2, r1
 8000f38:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	61fb      	str	r3, [r7, #28]
      return offset;
 8000f40:	69fb      	ldr	r3, [r7, #28]
    }
 8000f42:	4618      	mov	r0, r3
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b08a      	sub	sp, #40	; 0x28
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	889b      	ldrh	r3, [r3, #4]
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	6839      	ldr	r1, [r7, #0]
 8000f72:	440b      	add	r3, r1
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	3302      	adds	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	441a      	add	r2, r3
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4611      	mov	r1, r2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 f894 	bl	80020c4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	4413      	add	r3, r2
 8000fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d20c      	bcs.n	8000fcc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	441a      	add	r2, r3
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6839      	ldr	r1, [r7, #0]
 8000fbe:	440b      	add	r3, r1
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fca:	e7ec      	b.n	8000fa6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	441a      	add	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	4413      	add	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	441a      	add	r2, r3
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 f861 	bl	80020c4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	3304      	adds	r3, #4
 8001006:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	623b      	str	r3, [r7, #32]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4413      	add	r3, r2
 8001012:	6a3a      	ldr	r2, [r7, #32]
 8001014:	429a      	cmp	r2, r3
 8001016:	d20c      	bcs.n	8001032 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	441a      	add	r2, r3
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	3b01      	subs	r3, #1
 8001022:	6839      	ldr	r1, [r7, #0]
 8001024:	440b      	add	r3, r1
 8001026:	7812      	ldrb	r2, [r2, #0]
 8001028:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	3301      	adds	r3, #1
 800102e:	623b      	str	r3, [r7, #32]
 8001030:	e7ec      	b.n	800100c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4413      	add	r3, r2
 8001038:	3b01      	subs	r3, #1
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	4413      	add	r3, r2
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	3b01      	subs	r3, #1
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	441a      	add	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4413      	add	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	441a      	add	r2, r3
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4611      	mov	r1, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f001 f82e 	bl	80020c4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	3304      	adds	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	429a      	cmp	r2, r3
 800107c:	d20c      	bcs.n	8001098 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	441a      	add	r2, r3
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	3b01      	subs	r3, #1
 8001088:	6839      	ldr	r1, [r7, #0]
 800108a:	440b      	add	r3, r1
 800108c:	7812      	ldrb	r2, [r2, #0]
 800108e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	3301      	adds	r3, #1
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	e7ec      	b.n	8001072 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4413      	add	r3, r2
 800109e:	3b01      	subs	r3, #1
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	441a      	add	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4413      	add	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	6839      	ldr	r1, [r7, #0]
 80010c6:	440a      	add	r2, r1
 80010c8:	7812      	ldrb	r2, [r2, #0]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	3301      	adds	r3, #1
 80010d4:	6839      	ldr	r1, [r7, #0]
 80010d6:	440b      	add	r3, r1
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	4313      	orrs	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	3302      	adds	r3, #2
 80010e6:	6839      	ldr	r1, [r7, #0]
 80010e8:	440b      	add	r3, r1
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	041b      	lsls	r3, r3, #16
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	3303      	adds	r3, #3
 80010f8:	6839      	ldr	r1, [r7, #0]
 80010fa:	440b      	add	r3, r1
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	061b      	lsls	r3, r3, #24
 8001100:	4313      	orrs	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	3304      	adds	r3, #4
 800110e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001110:	69bb      	ldr	r3, [r7, #24]
    }
 8001112:	4618      	mov	r0, r3
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	08007d10 	.word	0x08007d10

08001138 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	08007d2c 	.word	0x08007d2c

08001154 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fd34 	bl	8000bcc <_ZN3ros3MsgC1Ev>
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	711a      	strb	r2, [r3, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001174:	609a      	str	r2, [r3, #8]
    {
    }
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	08007fcc 	.word	0x08007fcc
 8001184:	08007d0c 	.word	0x08007d0c

08001188 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	4413      	add	r3, r2
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	7912      	ldrb	r2, [r2, #4]
 80011a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3301      	adds	r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f843 	bl	8000238 <strlen>
 80011b2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	4413      	add	r3, r2
 80011ba:	68b9      	ldr	r1, [r7, #8]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 ff63 	bl	8002088 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	3304      	adds	r3, #4
 80011c6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	18d0      	adds	r0, r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f006 fbdb 	bl	8007990 <memcpy>
      offset += length_msg;
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
      return offset;
 80011e2:	68fb      	ldr	r3, [r7, #12]
    }
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	3301      	adds	r3, #1
 800120a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	441a      	add	r2, r3
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f000 ff53 	bl	80020c4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	3304      	adds	r3, #4
 8001222:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4413      	add	r3, r2
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	429a      	cmp	r2, r3
 8001232:	d20c      	bcs.n	800124e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	441a      	add	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3b01      	subs	r3, #1
 800123e:	6839      	ldr	r1, [r7, #0]
 8001240:	440b      	add	r3, r1
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e7ec      	b.n	8001228 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	3b01      	subs	r3, #1
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	4413      	add	r3, r2
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	3b01      	subs	r3, #1
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	441a      	add	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
     return offset;
 8001272:	693b      	ldr	r3, [r7, #16]
    }
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	08007d50 	.word	0x08007d50

08001298 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	08007d64 	.word	0x08007d64

080012b4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fc84 	bl	8000bcc <_ZN3ros3MsgC1Ev>
 80012c4:	4a11      	ldr	r2, [pc, #68]	; (800130c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	08007fb4 	.word	0x08007fb4

08001310 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6859      	ldr	r1, [r3, #4]
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	b2ca      	uxtb	r2, r1
 800132a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	0a19      	lsrs	r1, r3, #8
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	3301      	adds	r3, #1
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	4413      	add	r3, r2
 800133a:	b2ca      	uxtb	r2, r1
 800133c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	0c19      	lsrs	r1, r3, #16
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	3302      	adds	r3, #2
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	4413      	add	r3, r2
 800134c:	b2ca      	uxtb	r2, r1
 800134e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	0e19      	lsrs	r1, r3, #24
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	3303      	adds	r3, #3
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	4413      	add	r3, r2
 800135e:	b2ca      	uxtb	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	3304      	adds	r3, #4
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	6a3a      	ldr	r2, [r7, #32]
 8001372:	429a      	cmp	r2, r3
 8001374:	d22b      	bcs.n	80013ce <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001384:	6939      	ldr	r1, [r7, #16]
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	4413      	add	r3, r2
 800138c:	b2ca      	uxtb	r2, r1
 800138e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	0a19      	lsrs	r1, r3, #8
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	3301      	adds	r3, #1
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	4413      	add	r3, r2
 800139c:	b2ca      	uxtb	r2, r1
 800139e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	0c19      	lsrs	r1, r3, #16
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	3302      	adds	r3, #2
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	b2ca      	uxtb	r2, r1
 80013ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	0e19      	lsrs	r1, r3, #24
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	3303      	adds	r3, #3
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	b2ca      	uxtb	r2, r1
 80013be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	3304      	adds	r3, #4
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	3301      	adds	r3, #1
 80013ca:	623b      	str	r3, [r7, #32]
 80013cc:	e7ce      	b.n	800136c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6919      	ldr	r1, [r3, #16]
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	b2ca      	uxtb	r2, r1
 80013da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	0a19      	lsrs	r1, r3, #8
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	3301      	adds	r3, #1
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	4413      	add	r3, r2
 80013ea:	b2ca      	uxtb	r2, r1
 80013ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	0c19      	lsrs	r1, r3, #16
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	3302      	adds	r3, #2
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	b2ca      	uxtb	r2, r1
 80013fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	0e19      	lsrs	r1, r3, #24
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	3303      	adds	r3, #3
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	4413      	add	r3, r2
 800140e:	b2ca      	uxtb	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	3304      	adds	r3, #4
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	69fa      	ldr	r2, [r7, #28]
 8001422:	429a      	cmp	r2, r3
 8001424:	d22b      	bcs.n	800147e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699a      	ldr	r2, [r3, #24]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001434:	68f9      	ldr	r1, [r7, #12]
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	4413      	add	r3, r2
 800143c:	b2ca      	uxtb	r2, r1
 800143e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	0a19      	lsrs	r1, r3, #8
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	3301      	adds	r3, #1
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	4413      	add	r3, r2
 800144c:	b2ca      	uxtb	r2, r1
 800144e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	0c19      	lsrs	r1, r3, #16
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	3302      	adds	r3, #2
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	4413      	add	r3, r2
 800145c:	b2ca      	uxtb	r2, r1
 800145e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	0e19      	lsrs	r1, r3, #24
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	3303      	adds	r3, #3
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	4413      	add	r3, r2
 800146c:	b2ca      	uxtb	r2, r1
 800146e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	3304      	adds	r3, #4
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3301      	adds	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	e7ce      	b.n	800141c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69d9      	ldr	r1, [r3, #28]
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	4413      	add	r3, r2
 8001488:	b2ca      	uxtb	r2, r1
 800148a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	0a19      	lsrs	r1, r3, #8
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	3301      	adds	r3, #1
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	4413      	add	r3, r2
 800149a:	b2ca      	uxtb	r2, r1
 800149c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	0c19      	lsrs	r1, r3, #16
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	3302      	adds	r3, #2
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	b2ca      	uxtb	r2, r1
 80014ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	0e19      	lsrs	r1, r3, #24
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	3303      	adds	r3, #3
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	b2ca      	uxtb	r2, r1
 80014c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	3304      	adds	r3, #4
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d228      	bcs.n	8001528 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe fea8 	bl	8000238 <strlen>
 80014e8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	6979      	ldr	r1, [r7, #20]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 fdc8 	bl	8002088 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	3304      	adds	r3, #4
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	18d0      	adds	r0, r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	4619      	mov	r1, r3
 8001514:	f006 fa3c 	bl	8007990 <memcpy>
      offset += length_stringsi;
 8001518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	4413      	add	r3, r2
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	3301      	adds	r3, #1
 8001524:	61bb      	str	r3, [r7, #24]
 8001526:	e7d1      	b.n	80014cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800152a:	4618      	mov	r0, r3
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001532:	b580      	push	{r7, lr}
 8001534:	b08e      	sub	sp, #56	; 0x38
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	4413      	add	r3, r2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800154a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154c:	3301      	adds	r3, #1
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	4413      	add	r3, r2
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	6a3a      	ldr	r2, [r7, #32]
 8001558:	4313      	orrs	r3, r2
 800155a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800155c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155e:	3302      	adds	r3, #2
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	4413      	add	r3, r2
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	041b      	lsls	r3, r3, #16
 8001568:	6a3a      	ldr	r2, [r7, #32]
 800156a:	4313      	orrs	r3, r2
 800156c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800156e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001570:	3303      	adds	r3, #3
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	4413      	add	r3, r2
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	6a3a      	ldr	r2, [r7, #32]
 800157c:	4313      	orrs	r3, r2
 800157e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001582:	3304      	adds	r3, #4
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	6a3a      	ldr	r2, [r7, #32]
 800158c:	429a      	cmp	r2, r3
 800158e:	d90a      	bls.n	80015a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4619      	mov	r1, r3
 800159a:	4610      	mov	r0, r2
 800159c:	f006 fa0e 	bl	80079bc <realloc>
 80015a0:	4602      	mov	r2, r0
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a3a      	ldr	r2, [r7, #32]
 80015aa:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80015ac:	2300      	movs	r3, #0
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d236      	bcs.n	8001628 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015c2:	6839      	ldr	r1, [r7, #0]
 80015c4:	440a      	add	r2, r1
 80015c6:	7812      	ldrb	r2, [r2, #0]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d0:	3301      	adds	r3, #1
 80015d2:	6839      	ldr	r1, [r7, #0]
 80015d4:	440b      	add	r3, r1
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	4313      	orrs	r3, r2
 80015dc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e2:	3302      	adds	r3, #2
 80015e4:	6839      	ldr	r1, [r7, #0]
 80015e6:	440b      	add	r3, r1
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	041b      	lsls	r3, r3, #16
 80015ec:	4313      	orrs	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f4:	3303      	adds	r3, #3
 80015f6:	6839      	ldr	r1, [r7, #0]
 80015f8:	440b      	add	r3, r1
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	061b      	lsls	r3, r3, #24
 80015fe:	4313      	orrs	r3, r2
 8001600:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800160a:	3304      	adds	r3, #4
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	3208      	adds	r2, #8
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001622:	3301      	adds	r3, #1
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
 8001626:	e7c3      	b.n	80015b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	4413      	add	r3, r2
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001634:	3301      	adds	r3, #1
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	4313      	orrs	r3, r2
 8001642:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001646:	3302      	adds	r3, #2
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	4413      	add	r3, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	041b      	lsls	r3, r3, #16
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	4313      	orrs	r3, r2
 8001654:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	3303      	adds	r3, #3
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	4413      	add	r3, r2
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	4313      	orrs	r3, r2
 8001666:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166a:	3304      	adds	r3, #4
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	429a      	cmp	r2, r3
 8001676:	d90a      	bls.n	800168e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699a      	ldr	r2, [r3, #24]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f006 f99a 	bl	80079bc <realloc>
 8001688:	4602      	mov	r2, r0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800169e:	429a      	cmp	r2, r3
 80016a0:	d236      	bcs.n	8001710 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016aa:	6839      	ldr	r1, [r7, #0]
 80016ac:	440a      	add	r2, r1
 80016ae:	7812      	ldrb	r2, [r2, #0]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b8:	3301      	adds	r3, #1
 80016ba:	6839      	ldr	r1, [r7, #0]
 80016bc:	440b      	add	r3, r1
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ca:	3302      	adds	r3, #2
 80016cc:	6839      	ldr	r1, [r7, #0]
 80016ce:	440b      	add	r3, r1
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	041b      	lsls	r3, r3, #16
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016dc:	3303      	adds	r3, #3
 80016de:	6839      	ldr	r1, [r7, #0]
 80016e0:	440b      	add	r3, r1
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	061b      	lsls	r3, r3, #24
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80016f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f2:	3304      	adds	r3, #4
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699a      	ldr	r2, [r3, #24]
 80016fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	3214      	adds	r2, #20
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	3301      	adds	r3, #1
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800170e:	e7c3      	b.n	8001698 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	4413      	add	r3, r2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800171a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171c:	3301      	adds	r3, #1
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	4413      	add	r3, r2
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800172c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172e:	3302      	adds	r3, #2
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	4413      	add	r3, r2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800173e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001740:	3303      	adds	r3, #3
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	4413      	add	r3, r2
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	061b      	lsls	r3, r3, #24
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001752:	3304      	adds	r3, #4
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	429a      	cmp	r2, r3
 800175e:	d90a      	bls.n	8001776 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4619      	mov	r1, r3
 800176a:	4610      	mov	r0, r2
 800176c:	f006 f926 	bl	80079bc <realloc>
 8001770:	4602      	mov	r2, r0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800177c:	2300      	movs	r3, #0
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001786:	429a      	cmp	r2, r3
 8001788:	d23f      	bcs.n	800180a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800178a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	441a      	add	r2, r3
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fc94 	bl	80020c4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800179c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179e:	3304      	adds	r3, #4
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80017a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
 80017a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d20c      	bcs.n	80017cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	441a      	add	r2, r3
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6839      	ldr	r1, [r7, #0]
 80017be:	440b      	add	r3, r1
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	3301      	adds	r3, #1
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ca:	e7ec      	b.n	80017a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80017cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4413      	add	r3, r2
 80017d2:	3b01      	subs	r3, #1
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80017dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017de:	3b01      	subs	r3, #1
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	441a      	add	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80017e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	3220      	adds	r2, #32
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	3301      	adds	r3, #1
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
 8001808:	e7ba      	b.n	8001780 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800180a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800180c:	4618      	mov	r0, r3
 800180e:	3738      	adds	r7, #56	; 0x38
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	08007ed8 	.word	0x08007ed8

08001830 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	08007d88 	.word	0x08007d88

0800184c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	611a      	str	r2, [r3, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68d8      	ldr	r0, [r3, #12]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6891      	ldr	r1, [r2, #8]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	4798      	blx	r3
 8001898:	4603      	mov	r3, r0
  };
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
  }
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80018d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <_ZN13STM32HardwareC1Ev+0x34>)
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	20000130 	.word	0x20000130

08001918 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f804 	bl	800192e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3304      	adds	r3, #4
 800193e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001942:	4619      	mov	r1, r3
 8001944:	f004 fdb0 	bl	80064a8 <HAL_UART_Receive_DMA>
    }
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ffa8 	bl	80018ba <_ZN13STM32Hardware10getRdmaIndEv>
 800196a:	4603      	mov	r3, r0
 800196c:	429c      	cmp	r4, r3
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d012      	beq.n	80019a0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001980:	1c59      	adds	r1, r3, #1
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	791b      	ldrb	r3, [r3, #4]
 800198e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001996:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80019a0:	68fb      	ldr	r3, [r7, #12]
    }
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd90      	pop	{r4, r7, pc}
	...

080019ac <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	d108      	bne.n	80019d0 <_ZN13STM32Hardware5flushEv+0x24>
 80019be:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <_ZN13STM32Hardware5flushEv+0xe0>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	f083 0301 	eor.w	r3, r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <_ZN13STM32Hardware5flushEv+0x24>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <_ZN13STM32Hardware5flushEv+0x26>
 80019d0:	2300      	movs	r3, #0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d055      	beq.n	8001a82 <_ZN13STM32Hardware5flushEv+0xd6>
        mutex = true;
 80019d6:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <_ZN13STM32Hardware5flushEv+0xe0>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d047      	beq.n	8001a7c <_ZN13STM32Hardware5flushEv+0xd0>
          uint16_t len = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d217      	bcs.n	8001a30 <_ZN13STM32Hardware5flushEv+0x84>
			len = twind - tfind;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001a1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	89fa      	ldrh	r2, [r7, #14]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f004 fcc1 	bl	80063b0 <HAL_UART_Transmit_DMA>
 8001a2e:	e01f      	b.n	8001a70 <_ZN13STM32Hardware5flushEv+0xc4>
		  }else{
			len = tbuflen - tfind;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001a3c:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001a48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	89fa      	ldrh	r2, [r7, #14]
 8001a52:	4619      	mov	r1, r3
 8001a54:	f004 fcac 	bl	80063b0 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f004 fca0 	bl	80063b0 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <_ZN13STM32Hardware5flushEv+0xe0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
      }
    }
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000278 	.word	0x20000278

08001a90 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
      int n = length;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa6:	bfa8      	it	ge
 8001aa8:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001aac:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001ab4:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	4293      	cmp	r3, r2
 8001abc:	bf28      	it	cs
 8001abe:	4613      	movcs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001ac8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	68b9      	ldr	r1, [r7, #8]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f005 ff5b 	bl	8007990 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d00b      	beq.n	8001b0e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	18d1      	adds	r1, r2, r3
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f005 ff41 	bl	8007990 <memcpy>
      }

      flush();
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff ff4c 	bl	80019ac <_ZN13STM32Hardware5flushEv>
    }
 8001b14:	bf00      	nop
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	f001 fc18 	bl	8003358 <HAL_GetTick>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
      data(0)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f844 	bl	8000bcc <_ZN3ros3MsgC1Ev>
 8001b44:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <_ZN8std_msgs7Float32C1Ev+0x28>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	605a      	str	r2, [r3, #4]
    {
    }
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	08007f70 	.word	0x08007f70

08001b60 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b2ca      	uxtb	r2, r1
 8001b7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	0a19      	lsrs	r1, r3, #8
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3301      	adds	r3, #1
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	b2ca      	uxtb	r2, r1
 8001b8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	0c19      	lsrs	r1, r3, #16
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3302      	adds	r3, #2
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	b2ca      	uxtb	r2, r1
 8001b9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	0e19      	lsrs	r1, r3, #24
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3303      	adds	r3, #3
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	b2ca      	uxtb	r2, r1
 8001bae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	60fb      	str	r3, [r7, #12]
      return offset;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
    }
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	6839      	ldr	r1, [r7, #0]
 8001bdc:	440a      	add	r2, r1
 8001bde:	7812      	ldrb	r2, [r2, #0]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3301      	adds	r3, #1
 8001bea:	6839      	ldr	r1, [r7, #0]
 8001bec:	440b      	add	r3, r1
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	6839      	ldr	r1, [r7, #0]
 8001bfe:	440b      	add	r3, r1
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	041b      	lsls	r3, r3, #16
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3303      	adds	r3, #3
 8001c0e:	6839      	ldr	r1, [r7, #0]
 8001c10:	440b      	add	r3, r1
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	061b      	lsls	r3, r3, #24
 8001c16:	4313      	orrs	r3, r2
 8001c18:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3304      	adds	r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]
     return offset;
 8001c26:	68fb      	ldr	r3, [r7, #12]
    }
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <_ZN8std_msgs7Float327getTypeEv+0x18>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	08007dac 	.word	0x08007dac

08001c50 <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	08007dc0 	.word	0x08007dc0

08001c6c <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
      data(0)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe ffa8 	bl	8000bcc <_ZN3ros3MsgC1Ev>
 8001c7c:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <_ZN8std_msgs4BoolC1Ev+0x28>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	711a      	strb	r2, [r3, #4]
    {
    }
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	08007f58 	.word	0x08007f58

08001c98 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	791b      	ldrb	r3, [r3, #4]
 8001caa:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	7a3a      	ldrb	r2, [r7, #8]
 8001cb4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
      return offset;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    }
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001cca:	b480      	push	{r7}
 8001ccc:	b085      	sub	sp, #20
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001cdc:	7a3a      	ldrb	r2, [r7, #8]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6839      	ldr	r1, [r7, #0]
 8001ce2:	440b      	add	r3, r1
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8001cec:	7a3a      	ldrb	r2, [r7, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
     return offset;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    }
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <_ZN8std_msgs4Bool7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Bool"; };
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	08007de4 	.word	0x08007de4

08001d24 <_ZN8std_msgs4Bool6getMD5Ev>:
    virtual const char * getMD5() override { return "8b94c1b53db61fb6aed406028ad6332a"; };
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	08007df4 	.word	0x08007df4

08001d40 <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
      data(0)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe ff3e 	bl	8000bcc <_ZN3ros3MsgC1Ev>
 8001d50:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <_ZN8std_msgs5Int32C1Ev+0x28>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]
    {
    }
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	08007f40 	.word	0x08007f40

08001d6c <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	b2ca      	uxtb	r2, r1
 8001d8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	0a19      	lsrs	r1, r3, #8
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3301      	adds	r3, #1
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	b2ca      	uxtb	r2, r1
 8001d9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	0c19      	lsrs	r1, r3, #16
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3302      	adds	r3, #2
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	b2ca      	uxtb	r2, r1
 8001daa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	0e19      	lsrs	r1, r3, #24
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3303      	adds	r3, #3
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	b2ca      	uxtb	r2, r1
 8001dba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	60fb      	str	r3, [r7, #12]
      return offset;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
    }
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	6839      	ldr	r1, [r7, #0]
 8001de8:	440a      	add	r2, r1
 8001dea:	7812      	ldrb	r2, [r2, #0]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3301      	adds	r3, #1
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	440b      	add	r3, r1
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3302      	adds	r3, #2
 8001e08:	6839      	ldr	r1, [r7, #0]
 8001e0a:	440b      	add	r3, r1
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	041b      	lsls	r3, r3, #16
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3303      	adds	r3, #3
 8001e1a:	6839      	ldr	r1, [r7, #0]
 8001e1c:	440b      	add	r3, r1
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	60fb      	str	r3, [r7, #12]
     return offset;
 8001e32:	68fb      	ldr	r3, [r7, #12]
    }
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_ZN8std_msgs5Int327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int32"; };
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <_ZN8std_msgs5Int327getTypeEv+0x18>)
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	08007e18 	.word	0x08007e18

08001e5c <_ZN8std_msgs5Int326getMD5Ev>:
    virtual const char * getMD5() override { return "da5909fbe378aeaf85e547e830cc1bb7"; };
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	08007e28 	.word	0x08007e28

08001e78 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	08007fa0 	.word	0x08007fa0

08001e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ffe8 	bl	8001e78 <_ZN3ros15NodeHandleBase_C1Ev>
 8001ea8:	4a36      	ldr	r2, [pc, #216]	; (8001f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fd14 	bl	80018e0 <_ZN13STM32HardwareC1Ev>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f005 fd61 	bl	80079ac <memset>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f005 fd58 	bl	80079ac <memset>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8001f02:	2264      	movs	r2, #100	; 0x64
 8001f04:	2100      	movs	r1, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f005 fd50 	bl	80079ac <memset>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8001f12:	2264      	movs	r2, #100	; 0x64
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f005 fd48 	bl	80079ac <memset>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f99e 	bl	80012b4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	08007f2c 	.word	0x08007f2c

08001f88 <_Z5setupv>:
ros::Subscriber<std_msgs::Int32> sub_drive_setpoint ("drive_setpoint", &drive_setpoint_cb);
//ros::Subscriber<std_msgs::Bool>  sub_servo_pid_en   ("servo_pid_en",   &servo_pid_en_cb);
//ros::Subscriber<std_msgs::Int32> sub_servo_setpoint ("servo_setpoint", &servo_setpoint_cb);

void setup(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
	nh.initNode();
 8001f8c:	4809      	ldr	r0, [pc, #36]	; (8001fb4 <_Z5setupv+0x2c>)
 8001f8e:	f000 f917 	bl	80021c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    
    nh.advertise(pub_ugv_speed);
 8001f92:	4909      	ldr	r1, [pc, #36]	; (8001fb8 <_Z5setupv+0x30>)
 8001f94:	4807      	ldr	r0, [pc, #28]	; (8001fb4 <_Z5setupv+0x2c>)
 8001f96:	f000 f930 	bl	80021fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

    nh.subscribe(sub_drive_pid_en);
 8001f9a:	4908      	ldr	r1, [pc, #32]	; (8001fbc <_Z5setupv+0x34>)
 8001f9c:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <_Z5setupv+0x2c>)
 8001f9e:	f000 f95c 	bl	800225a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
    nh.subscribe(sub_drive_setpoint);
 8001fa2:	4907      	ldr	r1, [pc, #28]	; (8001fc0 <_Z5setupv+0x38>)
 8001fa4:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <_Z5setupv+0x2c>)
 8001fa6:	f000 f958 	bl	800225a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

    ugv.speed = 0;
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <_Z5setupv+0x3c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	2000027c 	.word	0x2000027c
 8001fb8:	20000c0c 	.word	0x20000c0c
 8001fbc:	20000c5c 	.word	0x20000c5c
 8001fc0:	20000c78 	.word	0x20000c78
 8001fc4:	20000bb8 	.word	0x20000bb8

08001fc8 <_Z4loopv>:



void loop(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
    ugv.speed++;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <_Z4loopv+0x28>)
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <_Z4loopv+0x28>)
 8001fd4:	6113      	str	r3, [r2, #16]
    msg_ugv_speed.data = ugv.speed;
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <_Z4loopv+0x28>)
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	4a06      	ldr	r2, [pc, #24]	; (8001ff4 <_Z4loopv+0x2c>)
 8001fdc:	6053      	str	r3, [r2, #4]
    pub_ugv_speed.publish(&msg_ugv_speed);
 8001fde:	4905      	ldr	r1, [pc, #20]	; (8001ff4 <_Z4loopv+0x2c>)
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <_Z4loopv+0x30>)
 8001fe2:	f7ff fc4a 	bl	800187a <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	nh.spinOnce();
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <_Z4loopv+0x34>)
 8001fe8:	f000 f962 	bl	80022b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000bb8 	.word	0x20000bb8
 8001ff4:	20000bcc 	.word	0x20000bcc
 8001ff8:	20000c0c 	.word	0x20000c0c
 8001ffc:	2000027c 	.word	0x2000027c

08002000 <_Z15drive_pid_en_cbRKN8std_msgs4BoolE>:


void drive_pid_en_cb (const std_msgs::Bool &msg)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
    ugv.drive_pid_en = msg.data;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	791a      	ldrb	r2, [r3, #4]
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <_Z15drive_pid_en_cbRKN8std_msgs4BoolE+0x1c>)
 800200e:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG_ENABLE
    memset(sendBuffer, 0x00, BUFFER_SIZE);
    sprintf(sendBuffer, "\r\nNew Drive Motor PID Mode: %d\r\n", ugv.drive_pid_en);
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *) sendBuffer, sizeof(sendBuffer));
#endif
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	20000bb8 	.word	0x20000bb8

08002020 <_Z17drive_setpoint_cbRKN8std_msgs5Int32E>:

void drive_setpoint_cb (const std_msgs::Int32 &msg)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    ugv.drive_setpoint = msg.data;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4a03      	ldr	r2, [pc, #12]	; (800203c <_Z17drive_setpoint_cbRKN8std_msgs5Int32E+0x1c>)
 800202e:	6053      	str	r3, [r2, #4]
#ifdef DEBUG_ENABLE
    memset(sendBuffer, 0x00, BUFFER_SIZE);
    sprintf(sendBuffer, "\r\nNew Drive Motor Setpoint: %d\r\n", ugv.drive_setpoint);
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *) sendBuffer, sizeof(sendBuffer)); 
#endif
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	20000bb8 	.word	0x20000bb8

08002040 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8002048:	4805      	ldr	r0, [pc, #20]	; (8002060 <HAL_UART_TxCpltCallback+0x20>)
 800204a:	f000 fb0a 	bl	8002662 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800204e:	4603      	mov	r3, r0
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fcab 	bl	80019ac <_ZN13STM32Hardware5flushEv>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000027c 	.word	0x2000027c

08002064 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <HAL_UART_RxCpltCallback+0x20>)
 800206e:	f000 faf8 	bl	8002662 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002072:	4603      	mov	r3, r0
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fc5a 	bl	800192e <_ZN13STM32Hardware10reset_rbufEv>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	2000027c 	.word	0x2000027c

08002088 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d80d      	bhi.n	80020b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	fa22 f103 	lsr.w	r1, r2, r3
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	b2ca      	uxtb	r2, r1
 80020ae:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3301      	adds	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	e7ee      	b.n	8002096 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d811      	bhi.n	8002102 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	440a      	add	r2, r1
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	4611      	mov	r1, r2
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	00d2      	lsls	r2, r2, #3
 80020f0:	fa01 f202 	lsl.w	r2, r1, r2
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3301      	adds	r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	e7ea      	b.n	80020d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	08007f88 	.word	0x08007f88

08002130 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ffe5 	bl	8002110 <_ZN3ros11Subscriber_C1Ev>
 8002146:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	330c      	adds	r3, #12
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fd8b 	bl	8001c6c <_ZN8std_msgs4BoolC1Ev>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	615a      	str	r2, [r3, #20]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	609a      	str	r2, [r3, #8]
  };
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	08007f14 	.word	0x08007f14

08002178 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ffc1 	bl	8002110 <_ZN3ros11Subscriber_C1Ev>
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	330c      	adds	r3, #12
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fdd1 	bl	8001d40 <_ZN8std_msgs5Int32C1Ev>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	615a      	str	r2, [r3, #20]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	609a      	str	r2, [r3, #8]
  };
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	08007efc 	.word	0x08007efc

080021c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3304      	adds	r3, #4
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fba3 	bl	8001918 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2b18      	cmp	r3, #24
 800220c:	dc1e      	bgt.n	800224c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d111      	bne.n	8002244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	60da      	str	r2, [r3, #12]
        return true;
 8002240:	2301      	movs	r3, #1
 8002242:	e004      	b.n	800224e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3301      	adds	r3, #1
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e7dd      	b.n	8002208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 800224c:	2300      	movs	r3, #0
  }
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 800225a:	b480      	push	{r7}
 800225c:	b085      	sub	sp, #20
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b18      	cmp	r3, #24
 800226c:	dc19      	bgt.n	80022a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10d      	bne.n	800229a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002286:	6839      	ldr	r1, [r7, #0]
 8002288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	605a      	str	r2, [r3, #4]
        return true;
 8002296:	2301      	movs	r3, #1
 8002298:	e004      	b.n	80022a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3301      	adds	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	e7e2      	b.n	8002268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 80022a2:	2300      	movs	r3, #0
  }
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3304      	adds	r3, #4
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fc2d 	bl	8001b1c <_ZN13STM32Hardware4timeEv>
 80022c2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d903      	bls.n	80022de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d903      	bls.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002302:	2b00      	cmp	r3, #0
 8002304:	d014      	beq.n	8002330 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3304      	adds	r3, #4
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fc06 	bl	8001b1c <_ZN13STM32Hardware4timeEv>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad2      	subs	r2, r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800231c:	429a      	cmp	r2, r3
 800231e:	bf8c      	ite	hi
 8002320:	2301      	movhi	r3, #1
 8002322:	2300      	movls	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800232a:	f06f 0301 	mvn.w	r3, #1
 800232e:	e194      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3304      	adds	r3, #4
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fb0b 	bl	8001950 <_ZN13STM32Hardware4readEv>
 800233a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f2c0 8174 	blt.w	800262c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	441a      	add	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800235a:	2b07      	cmp	r3, #7
 800235c:	d11e      	bne.n	800239c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002364:	1c59      	adds	r1, r3, #1
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	b2d1      	uxtb	r1, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	460a      	mov	r2, r1
 8002376:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002380:	1e5a      	subs	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1b4      	bne.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2208      	movs	r2, #8
 8002396:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800239a:	e7af      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d128      	bne.n	80023f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2bff      	cmp	r3, #255	; 0xff
 80023aa:	d10d      	bne.n	80023c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f103 0214 	add.w	r2, r3, #20
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80023c6:	e799      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3304      	adds	r3, #4
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fba5 	bl	8001b1c <_ZN13STM32Hardware4timeEv>
 80023d2:	4602      	mov	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	bf8c      	ite	hi
 80023e0:	2301      	movhi	r3, #1
 80023e2:	2300      	movls	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d088      	beq.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80023f2:	f06f 0301 	mvn.w	r3, #1
 80023f6:	e130      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d118      	bne.n	8002434 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2bfe      	cmp	r3, #254	; 0xfe
 8002406:	d107      	bne.n	8002418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002416:	e771      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002426:	2b00      	cmp	r3, #0
 8002428:	f47f af68 	bne.w	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f924 	bl	800267a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002432:	e763      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800243a:	2b02      	cmp	r3, #2
 800243c:	d113      	bne.n	8002466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002464:	e74a      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800246c:	2b03      	cmp	r3, #3
 800246e:	d110      	bne.n	8002492 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	441a      	add	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002490:	e734      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002498:	2b04      	cmp	r3, #4
 800249a:	d116      	bne.n	80024ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80024a2:	425a      	negs	r2, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	bf58      	it	pl
 80024aa:	4253      	negpl	r3, r2
 80024ac:	2bff      	cmp	r3, #255	; 0xff
 80024ae:	d107      	bne.n	80024c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80024be:	e71d      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80024c8:	e718      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d10f      	bne.n	80024f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80024f2:	e703      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d117      	bne.n	800252e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	441a      	add	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2207      	movs	r2, #7
 8002514:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800251e:	2b00      	cmp	r3, #0
 8002520:	f47f aeec 	bne.w	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2208      	movs	r2, #8
 8002528:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800252c:	e6e6      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002534:	2b08      	cmp	r3, #8
 8002536:	f47f aee1 	bne.w	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002548:	425a      	negs	r2, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	bf58      	it	pl
 8002550:	4253      	negpl	r3, r2
 8002552:	2bff      	cmp	r3, #255	; 0xff
 8002554:	f47f aed2 	bne.w	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d110      	bne.n	8002584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f889 	bl	800267a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f8a4 	bl	80026b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002582:	e06a      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800258a:	2b0a      	cmp	r3, #10
 800258c:	d107      	bne.n	800259e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002594:	4619      	mov	r1, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f96c 	bl	8002874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800259c:	e6ae      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80025a4:	2b06      	cmp	r3, #6
 80025a6:	d10e      	bne.n	80025c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80025b4:	4619      	mov	r1, r3
 80025b6:	4610      	mov	r0, r2
 80025b8:	f7fe ffbb 	bl	8001532 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80025c4:	e69a      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80025cc:	2b0b      	cmp	r3, #11
 80025ce:	d104      	bne.n	80025da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80025d8:	e690      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80025e0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80025ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f43f ae84 	beq.w	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80025fa:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002604:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800260e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8002626:	4611      	mov	r1, r2
 8002628:	4798      	blx	r3
    while (true)
 800262a:	e667      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800262c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00f      	beq.n	8002658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002646:	4293      	cmp	r3, r2
 8002648:	d906      	bls.n	8002658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f815 	bl	800267a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8002658:	2300      	movs	r3, #0
  }
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
    return &hardware_;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3304      	adds	r3, #4
  }
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800267a:	b580      	push	{r7, lr}
 800267c:	b086      	sub	sp, #24
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8002682:	f107 030c 	add.w	r3, r7, #12
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fab0 	bl	8000bec <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f107 020c 	add.w	r2, r7, #12
 8002696:	210a      	movs	r1, #10
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
    rt_time = hardware_.time();
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3304      	adds	r3, #4
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fa3b 	bl	8001b1c <_ZN13STM32Hardware4timeEv>
 80026a6:	4602      	mov	r2, r0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80026ae:	bf00      	nop
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80026b6:	b590      	push	{r4, r7, lr}
 80026b8:	b08b      	sub	sp, #44	; 0x2c
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80026be:	f107 030c 	add.w	r3, r7, #12
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fb82 	bl	8000dcc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80026c8:	2300      	movs	r3, #0
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	2b18      	cmp	r3, #24
 80026d0:	dc63      	bgt.n	800279a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d056      	beq.n	8002792 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	6859      	ldr	r1, [r3, #4]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3308      	adds	r3, #8
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4608      	mov	r0, r1
 8002732:	4798      	blx	r3
 8002734:	4603      	mov	r3, r0
 8002736:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	330c      	adds	r3, #12
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4608      	mov	r0, r1
 8002760:	4798      	blx	r3
 8002762:	4603      	mov	r3, r0
 8002764:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800276a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681c      	ldr	r4, [r3, #0]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f88e 	bl	80018a2 <_ZN3ros9Publisher15getEndpointTypeEv>
 8002786:	4601      	mov	r1, r0
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	461a      	mov	r2, r3
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	3301      	adds	r3, #1
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
 8002798:	e798      	b.n	80026cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	2b18      	cmp	r3, #24
 80027a2:	dc5f      	bgt.n	8002864 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80027ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d053      	beq.n	800285c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80027bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ca:	f202 2222 	addw	r2, r2, #546	; 0x222
 80027ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027da:	f202 2222 	addw	r2, r2, #546	; 0x222
 80027de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80027ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3308      	adds	r3, #8
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4608      	mov	r0, r1
 80027f6:	4798      	blx	r3
 80027f8:	4603      	mov	r3, r0
 80027fa:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002800:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	330c      	adds	r3, #12
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4608      	mov	r0, r1
 800281c:	4798      	blx	r3
 800281e:	4603      	mov	r3, r0
 8002820:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002826:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681c      	ldr	r4, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002832:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002836:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	3304      	adds	r3, #4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4608      	mov	r0, r1
 800284e:	4798      	blx	r3
 8002850:	4601      	mov	r1, r0
 8002852:	f107 030c 	add.w	r3, r7, #12
 8002856:	461a      	mov	r2, r3
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	3301      	adds	r3, #1
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
 8002862:	e79c      	b.n	800279e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800286c:	bf00      	nop
 800286e:	372c      	adds	r7, #44	; 0x2c
 8002870:	46bd      	mov	sp, r7
 8002872:	bd90      	pop	{r4, r7, pc}

08002874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800287e:	f107 0308 	add.w	r3, r7, #8
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe f9b2 	bl	8000bec <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3304      	adds	r3, #4
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff f945 	bl	8001b1c <_ZN13STM32Hardware4timeEv>
 8002892:	4602      	mov	r2, r0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800289e:	f107 0308 	add.w	r3, r7, #8
 80028a2:	6839      	ldr	r1, [r7, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe fa11 	bl	8000ccc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	4915      	ldr	r1, [pc, #84]	; (8002904 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80028b0:	fba1 1303 	umull	r1, r3, r1, r3
 80028b4:	099b      	lsrs	r3, r3, #6
 80028b6:	4413      	add	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80028ba:	6939      	ldr	r1, [r7, #16]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80028c0:	fba3 0302 	umull	r0, r3, r3, r2
 80028c4:	099b      	lsrs	r3, r3, #6
 80028c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ca:	fb00 f303 	mul.w	r3, r0, r3
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	4a0d      	ldr	r2, [pc, #52]	; (8002908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80028d2:	fb02 f303 	mul.w	r3, r2, r3
 80028d6:	440b      	add	r3, r1
 80028d8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80028da:	f107 0308 	add.w	r3, r7, #8
 80028de:	3304      	adds	r3, #4
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f8a6 	bl	8002a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff f915 	bl	8001b1c <_ZN13STM32Hardware4timeEv>
 80028f2:	4602      	mov	r2, r0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80028fa:	bf00      	nop
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	10624dd3 	.word	0x10624dd3
 8002908:	000f4240 	.word	0x000f4240

0800290c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  {

    if (id >= 100 && !configured_)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b63      	cmp	r3, #99	; 0x63
 800291c:	dd09      	ble.n	8002932 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002924:	f083 0301 	eor.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800292e:	2300      	movs	r3, #0
 8002930:	e079      	b.n	8002a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800293e:	3207      	adds	r2, #7
 8002940:	4611      	mov	r1, r2
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	4798      	blx	r3
 8002946:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	22ff      	movs	r2, #255	; 0xff
 800294c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	22fe      	movs	r2, #254	; 0xfe
 8002954:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	b29b      	uxth	r3, r3
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	b29b      	uxth	r3, r3
 800296a:	b2da      	uxtb	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800297e:	4413      	add	r3, r2
 8002980:	b2db      	uxtb	r3, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	b2da      	uxtb	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	b21b      	sxth	r3, r3
 800299a:	121b      	asrs	r3, r3, #8
 800299c:	b21b      	sxth	r3, r3
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80029aa:	2305      	movs	r3, #5
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3306      	adds	r3, #6
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	dc0d      	bgt.n	80029d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	4413      	add	r3, r2
 80029be:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	4413      	add	r3, r2
 80029ca:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	3301      	adds	r3, #1
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	e7ec      	b.n	80029ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	3307      	adds	r3, #7
 80029d8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	425a      	negs	r2, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	bf58      	it	pl
 80029e4:	4253      	negpl	r3, r2
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	1c59      	adds	r1, r3, #1
 80029ec:	6179      	str	r1, [r7, #20]
 80029ee:	43d2      	mvns	r2, r2
 80029f0:	b2d1      	uxtb	r1, r2
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4413      	add	r3, r2
 80029f6:	460a      	mov	r2, r1
 80029f8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a02:	dc0a      	bgt.n	8002a1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1d18      	adds	r0, r3, #4
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4619      	mov	r1, r3
 8002a12:	f7ff f83d 	bl	8001a90 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	e005      	b.n	8002a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002a1a:	4905      	ldr	r1, [pc, #20]	; (8002a30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f849 	bl	8002ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8002a26:	4618      	mov	r0, r3
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	08007e4c 	.word	0x08007e4c

08002a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff f86a 	bl	8001b1c <_ZN13STM32Hardware4timeEv>
 8002a48:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4915      	ldr	r1, [pc, #84]	; (8002aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002a52:	fba1 1303 	umull	r1, r3, r1, r3
 8002a56:	099b      	lsrs	r3, r3, #6
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	1e5a      	subs	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6859      	ldr	r1, [r3, #4]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002a6a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a6e:	099b      	lsrs	r3, r3, #6
 8002a70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a74:	fb00 f303 	mul.w	r3, r0, r3
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	4a0c      	ldr	r2, [pc, #48]	; (8002aac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8002a7c:	fb02 f303 	mul.w	r3, r2, r3
 8002a80:	1aca      	subs	r2, r1, r3
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8002a84:	4413      	add	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f000 fbb6 	bl	800320c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	10624dd3 	.word	0x10624dd3
 8002aac:	000f4240 	.word	0x000f4240
 8002ab0:	3b9aca00 	.word	0x3b9aca00

08002ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	2103      	movs	r1, #3
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f804 	bl	8002ad0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe fb36 	bl	8001154 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002ae8:	7afb      	ldrb	r3, [r7, #11]
 8002aea:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f107 0214 	add.w	r2, r7, #20
 8002afa:	2107      	movs	r1, #7
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	4798      	blx	r3
  }
 8002b00:	bf00      	nop
 8002b02:	3720      	adds	r7, #32
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <_Z41__static_initialization_and_destruction_0ii>:
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d143      	bne.n	8002ba0 <_Z41__static_initialization_and_destruction_0ii+0x98>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d13e      	bne.n	8002ba0 <_Z41__static_initialization_and_destruction_0ii+0x98>
ros::NodeHandle nh;
 8002b22:	4821      	ldr	r0, [pc, #132]	; (8002ba8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002b24:	f7ff f9b8 	bl	8001e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int32   msg_ugv_speed;
 8002b28:	4820      	ldr	r0, [pc, #128]	; (8002bac <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002b2a:	f7ff f909 	bl	8001d40 <_ZN8std_msgs5Int32C1Ev>
std_msgs::Float32 msg_ugv_heading;
 8002b2e:	4820      	ldr	r0, [pc, #128]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8002b30:	f7ff f800 	bl	8001b34 <_ZN8std_msgs7Float32C1Ev>
std_msgs::Bool    msg_drive_alarm;
 8002b34:	481f      	ldr	r0, [pc, #124]	; (8002bb4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002b36:	f7ff f899 	bl	8001c6c <_ZN8std_msgs4BoolC1Ev>
std_msgs::Bool    msg_servo_alarm;
 8002b3a:	481f      	ldr	r0, [pc, #124]	; (8002bb8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002b3c:	f7ff f896 	bl	8001c6c <_ZN8std_msgs4BoolC1Ev>
std_msgs::Bool    msg_drive_pid_en;
 8002b40:	481e      	ldr	r0, [pc, #120]	; (8002bbc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002b42:	f7ff f893 	bl	8001c6c <_ZN8std_msgs4BoolC1Ev>
std_msgs::Bool    msg_servo_pid_en;
 8002b46:	481e      	ldr	r0, [pc, #120]	; (8002bc0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002b48:	f7ff f890 	bl	8001c6c <_ZN8std_msgs4BoolC1Ev>
std_msgs::Int32   msg_drive_setpoint;
 8002b4c:	481d      	ldr	r0, [pc, #116]	; (8002bc4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002b4e:	f7ff f8f7 	bl	8001d40 <_ZN8std_msgs5Int32C1Ev>
std_msgs::Int32   msg_servo_setpoint;
 8002b52:	481d      	ldr	r0, [pc, #116]	; (8002bc8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002b54:	f7ff f8f4 	bl	8001d40 <_ZN8std_msgs5Int32C1Ev>
ros::Publisher pub_ugv_speed   ("ugv_speed",   &msg_ugv_speed);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	4a14      	ldr	r2, [pc, #80]	; (8002bac <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002b5c:	491b      	ldr	r1, [pc, #108]	; (8002bcc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8002b5e:	481c      	ldr	r0, [pc, #112]	; (8002bd0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8002b60:	f7fe fe74 	bl	800184c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_ugv_heading ("ugv_heading", &msg_ugv_heading);
 8002b64:	2300      	movs	r3, #0
 8002b66:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8002b68:	491a      	ldr	r1, [pc, #104]	; (8002bd4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002b6a:	481b      	ldr	r0, [pc, #108]	; (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002b6c:	f7fe fe6e 	bl	800184c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_drive_alarm ("drive_alarm", &msg_drive_alarm);
 8002b70:	2300      	movs	r3, #0
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002b74:	4919      	ldr	r1, [pc, #100]	; (8002bdc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002b76:	481a      	ldr	r0, [pc, #104]	; (8002be0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002b78:	f7fe fe68 	bl	800184c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_servo_alarm ("servo_alarm", &msg_servo_alarm);
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002b80:	4918      	ldr	r1, [pc, #96]	; (8002be4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002b82:	4819      	ldr	r0, [pc, #100]	; (8002be8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002b84:	f7fe fe62 	bl	800184c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Bool>  sub_drive_pid_en   ("drive_pid_en",   &drive_pid_en_cb);
 8002b88:	2301      	movs	r3, #1
 8002b8a:	4a18      	ldr	r2, [pc, #96]	; (8002bec <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002b8c:	4918      	ldr	r1, [pc, #96]	; (8002bf0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002b8e:	4819      	ldr	r0, [pc, #100]	; (8002bf4 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002b90:	f7ff face 	bl	8002130 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int32> sub_drive_setpoint ("drive_setpoint", &drive_setpoint_cb);
 8002b94:	2301      	movs	r3, #1
 8002b96:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8002b98:	4918      	ldr	r1, [pc, #96]	; (8002bfc <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002b9a:	4819      	ldr	r0, [pc, #100]	; (8002c00 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8002b9c:	f7ff faec 	bl	8002178 <_ZN3ros10SubscriberIN8std_msgs5Int32EvEC1EPKcPFvRKS2_Ei>
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	2000027c 	.word	0x2000027c
 8002bac:	20000bcc 	.word	0x20000bcc
 8002bb0:	20000bd4 	.word	0x20000bd4
 8002bb4:	20000bdc 	.word	0x20000bdc
 8002bb8:	20000be4 	.word	0x20000be4
 8002bbc:	20000bec 	.word	0x20000bec
 8002bc0:	20000bf4 	.word	0x20000bf4
 8002bc4:	20000bfc 	.word	0x20000bfc
 8002bc8:	20000c04 	.word	0x20000c04
 8002bcc:	08007e88 	.word	0x08007e88
 8002bd0:	20000c0c 	.word	0x20000c0c
 8002bd4:	08007e94 	.word	0x08007e94
 8002bd8:	20000c20 	.word	0x20000c20
 8002bdc:	08007ea0 	.word	0x08007ea0
 8002be0:	20000c34 	.word	0x20000c34
 8002be4:	08007eac 	.word	0x08007eac
 8002be8:	20000c48 	.word	0x20000c48
 8002bec:	08002001 	.word	0x08002001
 8002bf0:	08007eb8 	.word	0x08007eb8
 8002bf4:	20000c5c 	.word	0x20000c5c
 8002bf8:	08002021 	.word	0x08002021
 8002bfc:	08007ec8 	.word	0x08007ec8
 8002c00:	20000c78 	.word	0x20000c78

08002c04 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	330c      	adds	r3, #12
 8002c12:	6839      	ldr	r1, [r7, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff f8db 	bl	8001dd0 <_ZN8std_msgs5Int3211deserializeEPh>
    this->cb_(msg);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	320c      	adds	r2, #12
 8002c22:	4610      	mov	r0, r2
 8002c24:	4798      	blx	r3
  }
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <_ZN3ros10SubscriberIN8std_msgs5Int32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
  }
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	330c      	adds	r3, #12
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff f8f4 	bl	8001e40 <_ZN8std_msgs5Int327getTypeEv>
 8002c58:	4603      	mov	r3, r0
  }
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <_ZN3ros10SubscriberIN8std_msgs5Int32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff f8f4 	bl	8001e5c <_ZN8std_msgs5Int326getMD5Ev>
 8002c74:	4603      	mov	r3, r0
  }
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	6839      	ldr	r1, [r7, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff f81b 	bl	8001cca <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	320c      	adds	r2, #12
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4798      	blx	r3
  }
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
  }
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	330c      	adds	r3, #12
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff f81b 	bl	8001d08 <_ZN8std_msgs4Bool7getTypeEv>
 8002cd2:	4603      	mov	r3, r0
  }
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	330c      	adds	r3, #12
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff f81b 	bl	8001d24 <_ZN8std_msgs4Bool6getMD5Ev>
 8002cee:	4603      	mov	r3, r0
  }
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
    return configured_;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <_GLOBAL__sub_I_nh>:
 8002d12:	b580      	push	{r7, lr}
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f7ff fef4 	bl	8002b08 <_Z41__static_initialization_and_destruction_0ii>
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <HAL_MspInit+0x44>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <HAL_MspInit+0x44>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d34:	6413      	str	r3, [r2, #64]	; 0x40
 8002d36:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <HAL_MspInit+0x44>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_MspInit+0x44>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	4a08      	ldr	r2, [pc, #32]	; (8002d68 <HAL_MspInit+0x44>)
 8002d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_MspInit+0x44>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800

08002d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b0ae      	sub	sp, #184	; 0xb8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	2290      	movs	r2, #144	; 0x90
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f004 fe0d 	bl	80079ac <memset>
  if(hi2c->Instance==I2C1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a22      	ldr	r2, [pc, #136]	; (8002e20 <HAL_I2C_MspInit+0xb4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d13c      	bne.n	8002e16 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002da0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002da2:	2300      	movs	r3, #0
 8002da4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002da6:	f107 0314 	add.w	r3, r7, #20
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 ffce 	bl	8004d4c <HAL_RCCEx_PeriphCLKConfig>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002db6:	f7fd fef3 	bl	8000ba0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dba:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <HAL_I2C_MspInit+0xb8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a19      	ldr	r2, [pc, #100]	; (8002e24 <HAL_I2C_MspInit+0xb8>)
 8002dc0:	f043 0302 	orr.w	r3, r3, #2
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <HAL_I2C_MspInit+0xb8>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002dd2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dda:	2312      	movs	r3, #18
 8002ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de6:	2303      	movs	r3, #3
 8002de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dec:	2304      	movs	r3, #4
 8002dee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002df6:	4619      	mov	r1, r3
 8002df8:	480b      	ldr	r0, [pc, #44]	; (8002e28 <HAL_I2C_MspInit+0xbc>)
 8002dfa:	f000 ffd5 	bl	8003da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_I2C_MspInit+0xb8>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <HAL_I2C_MspInit+0xb8>)
 8002e04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_I2C_MspInit+0xb8>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e16:	bf00      	nop
 8002e18:	37b8      	adds	r7, #184	; 0xb8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40005400 	.word	0x40005400
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40020400 	.word	0x40020400

08002e2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3c:	d10b      	bne.n	8002e56 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_TIM_Base_MspInit+0x38>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <HAL_TIM_Base_MspInit+0x38>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_TIM_Base_MspInit+0x38>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800

08002e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e88:	d138      	bne.n	8002efc <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8a:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <HAL_TIM_MspPostInit+0x9c>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <HAL_TIM_MspPostInit+0x9c>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_TIM_MspPostInit+0x9c>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea2:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <HAL_TIM_MspPostInit+0x9c>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <HAL_TIM_MspPostInit+0x9c>)
 8002ea8:	f043 0302 	orr.w	r3, r3, #2
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <HAL_TIM_MspPostInit+0x9c>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002eba:	2328      	movs	r3, #40	; 0x28
 8002ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ece:	f107 0314 	add.w	r3, r7, #20
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	480c      	ldr	r0, [pc, #48]	; (8002f08 <HAL_TIM_MspPostInit+0xa0>)
 8002ed6:	f000 ff67 	bl	8003da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8002eda:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eec:	2301      	movs	r3, #1
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4805      	ldr	r0, [pc, #20]	; (8002f0c <HAL_TIM_MspPostInit+0xa4>)
 8002ef8:	f000 ff56 	bl	8003da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002efc:	bf00      	nop
 8002efe:	3728      	adds	r7, #40	; 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40020000 	.word	0x40020000
 8002f0c:	40020400 	.word	0x40020400

08002f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b0ae      	sub	sp, #184	; 0xb8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	2290      	movs	r2, #144	; 0x90
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f004 fd3b 	bl	80079ac <memset>
  if(huart->Instance==USART3)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a54      	ldr	r2, [pc, #336]	; (800308c <HAL_UART_MspInit+0x17c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	f040 80a1 	bne.w	8003084 <HAL_UART_MspInit+0x174>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f46:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f4c:	f107 0314 	add.w	r3, r7, #20
 8002f50:	4618      	mov	r0, r3
 8002f52:	f001 fefb 	bl	8004d4c <HAL_RCCEx_PeriphCLKConfig>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002f5c:	f7fd fe20 	bl	8000ba0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f60:	4b4b      	ldr	r3, [pc, #300]	; (8003090 <HAL_UART_MspInit+0x180>)
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	4a4a      	ldr	r2, [pc, #296]	; (8003090 <HAL_UART_MspInit+0x180>)
 8002f66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6c:	4b48      	ldr	r3, [pc, #288]	; (8003090 <HAL_UART_MspInit+0x180>)
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f78:	4b45      	ldr	r3, [pc, #276]	; (8003090 <HAL_UART_MspInit+0x180>)
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	4a44      	ldr	r2, [pc, #272]	; (8003090 <HAL_UART_MspInit+0x180>)
 8002f7e:	f043 0308 	orr.w	r3, r3, #8
 8002f82:	6313      	str	r3, [r2, #48]	; 0x30
 8002f84:	4b42      	ldr	r3, [pc, #264]	; (8003090 <HAL_UART_MspInit+0x180>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002f90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002faa:	2307      	movs	r3, #7
 8002fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4837      	ldr	r0, [pc, #220]	; (8003094 <HAL_UART_MspInit+0x184>)
 8002fb8:	f000 fef6 	bl	8003da8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002fbc:	4b36      	ldr	r3, [pc, #216]	; (8003098 <HAL_UART_MspInit+0x188>)
 8002fbe:	4a37      	ldr	r2, [pc, #220]	; (800309c <HAL_UART_MspInit+0x18c>)
 8002fc0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002fc2:	4b35      	ldr	r3, [pc, #212]	; (8003098 <HAL_UART_MspInit+0x188>)
 8002fc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fc8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fca:	4b33      	ldr	r3, [pc, #204]	; (8003098 <HAL_UART_MspInit+0x188>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd0:	4b31      	ldr	r3, [pc, #196]	; (8003098 <HAL_UART_MspInit+0x188>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fd6:	4b30      	ldr	r3, [pc, #192]	; (8003098 <HAL_UART_MspInit+0x188>)
 8002fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fdc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fde:	4b2e      	ldr	r3, [pc, #184]	; (8003098 <HAL_UART_MspInit+0x188>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fe4:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <HAL_UART_MspInit+0x188>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002fea:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <HAL_UART_MspInit+0x188>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ff0:	4b29      	ldr	r3, [pc, #164]	; (8003098 <HAL_UART_MspInit+0x188>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <HAL_UART_MspInit+0x188>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002ffc:	4826      	ldr	r0, [pc, #152]	; (8003098 <HAL_UART_MspInit+0x188>)
 8002ffe:	f000 fac9 	bl	8003594 <HAL_DMA_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8003008:	f7fd fdca 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a22      	ldr	r2, [pc, #136]	; (8003098 <HAL_UART_MspInit+0x188>)
 8003010:	675a      	str	r2, [r3, #116]	; 0x74
 8003012:	4a21      	ldr	r2, [pc, #132]	; (8003098 <HAL_UART_MspInit+0x188>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003018:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <HAL_UART_MspInit+0x190>)
 800301a:	4a22      	ldr	r2, [pc, #136]	; (80030a4 <HAL_UART_MspInit+0x194>)
 800301c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_UART_MspInit+0x190>)
 8003020:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003024:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003026:	4b1e      	ldr	r3, [pc, #120]	; (80030a0 <HAL_UART_MspInit+0x190>)
 8003028:	2240      	movs	r2, #64	; 0x40
 800302a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800302c:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <HAL_UART_MspInit+0x190>)
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003032:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <HAL_UART_MspInit+0x190>)
 8003034:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003038:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800303a:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <HAL_UART_MspInit+0x190>)
 800303c:	2200      	movs	r2, #0
 800303e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003040:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <HAL_UART_MspInit+0x190>)
 8003042:	2200      	movs	r2, #0
 8003044:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <HAL_UART_MspInit+0x190>)
 8003048:	2200      	movs	r2, #0
 800304a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800304c:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <HAL_UART_MspInit+0x190>)
 800304e:	2200      	movs	r2, #0
 8003050:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003052:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <HAL_UART_MspInit+0x190>)
 8003054:	2200      	movs	r2, #0
 8003056:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003058:	4811      	ldr	r0, [pc, #68]	; (80030a0 <HAL_UART_MspInit+0x190>)
 800305a:	f000 fa9b 	bl	8003594 <HAL_DMA_Init>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8003064:	f7fd fd9c 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a0d      	ldr	r2, [pc, #52]	; (80030a0 <HAL_UART_MspInit+0x190>)
 800306c:	671a      	str	r2, [r3, #112]	; 0x70
 800306e:	4a0c      	ldr	r2, [pc, #48]	; (80030a0 <HAL_UART_MspInit+0x190>)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003074:	2200      	movs	r2, #0
 8003076:	2100      	movs	r1, #0
 8003078:	2027      	movs	r0, #39	; 0x27
 800307a:	f000 fa54 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800307e:	2027      	movs	r0, #39	; 0x27
 8003080:	f000 fa6d 	bl	800355e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003084:	bf00      	nop
 8003086:	37b8      	adds	r7, #184	; 0xb8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40004800 	.word	0x40004800
 8003090:	40023800 	.word	0x40023800
 8003094:	40020c00 	.word	0x40020c00
 8003098:	200001b8 	.word	0x200001b8
 800309c:	40026028 	.word	0x40026028
 80030a0:	20000218 	.word	0x20000218
 80030a4:	40026058 	.word	0x40026058

080030a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <NMI_Handler+0x4>

080030ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b2:	e7fe      	b.n	80030b2 <HardFault_Handler+0x4>

080030b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b8:	e7fe      	b.n	80030b8 <MemManage_Handler+0x4>

080030ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030be:	e7fe      	b.n	80030be <BusFault_Handler+0x4>

080030c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c4:	e7fe      	b.n	80030c4 <UsageFault_Handler+0x4>

080030c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030f4:	f000 f91c 	bl	8003330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}

080030fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <DMA1_Stream1_IRQHandler+0x10>)
 8003102:	f000 fbe7 	bl	80038d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200001b8 	.word	0x200001b8

08003110 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003114:	4802      	ldr	r0, [pc, #8]	; (8003120 <DMA1_Stream3_IRQHandler+0x10>)
 8003116:	f000 fbdd 	bl	80038d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000218 	.word	0x20000218

08003124 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <USART3_IRQHandler+0x10>)
 800312a:	f003 fa01 	bl	8006530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000130 	.word	0x20000130

08003138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
	return 1;
 800313c:	2301      	movs	r3, #1
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <_kill>:

int _kill(int pid, int sig)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003152:	f004 fbf3 	bl	800793c <__errno>
 8003156:	4603      	mov	r3, r0
 8003158:	2216      	movs	r2, #22
 800315a:	601a      	str	r2, [r3, #0]
	return -1;
 800315c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <_exit>:

void _exit (int status)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003170:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ffe7 	bl	8003148 <_kill>
	while (1) {}		/* Make sure we hang here */
 800317a:	e7fe      	b.n	800317a <_exit+0x12>

0800317c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003184:	4a14      	ldr	r2, [pc, #80]	; (80031d8 <_sbrk+0x5c>)
 8003186:	4b15      	ldr	r3, [pc, #84]	; (80031dc <_sbrk+0x60>)
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003190:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <_sbrk+0x64>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <_sbrk+0x64>)
 800319a:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <_sbrk+0x68>)
 800319c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <_sbrk+0x64>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d207      	bcs.n	80031bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031ac:	f004 fbc6 	bl	800793c <__errno>
 80031b0:	4603      	mov	r3, r0
 80031b2:	220c      	movs	r2, #12
 80031b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031ba:	e009      	b.n	80031d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <_sbrk+0x64>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031c2:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <_sbrk+0x64>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	4a05      	ldr	r2, [pc, #20]	; (80031e0 <_sbrk+0x64>)
 80031cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ce:	68fb      	ldr	r3, [r7, #12]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20080000 	.word	0x20080000
 80031dc:	00000400 	.word	0x00000400
 80031e0:	20000c94 	.word	0x20000c94
 80031e4:	20000cb0 	.word	0x20000cb0

080031e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <SystemInit+0x20>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	4a05      	ldr	r2, [pc, #20]	; (8003208 <SystemInit+0x20>)
 80031f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	0a5a      	lsrs	r2, r3, #9
 800321c:	490f      	ldr	r1, [pc, #60]	; (800325c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800321e:	fba1 1202 	umull	r1, r2, r1, r2
 8003222:	09d2      	lsrs	r2, r2, #7
 8003224:	490e      	ldr	r1, [pc, #56]	; (8003260 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8003226:	fb01 f202 	mul.w	r2, r1, r2
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	0a5b      	lsrs	r3, r3, #9
 8003234:	4a09      	ldr	r2, [pc, #36]	; (800325c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	09db      	lsrs	r3, r3, #7
 800323c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	441a      	add	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	601a      	str	r2, [r3, #0]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	00044b83 	.word	0x00044b83
 8003260:	3b9aca00 	.word	0x3b9aca00

08003264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800329c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003268:	480d      	ldr	r0, [pc, #52]	; (80032a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800326a:	490e      	ldr	r1, [pc, #56]	; (80032a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800326c:	4a0e      	ldr	r2, [pc, #56]	; (80032a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800326e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003270:	e002      	b.n	8003278 <LoopCopyDataInit>

08003272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003276:	3304      	adds	r3, #4

08003278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800327c:	d3f9      	bcc.n	8003272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800327e:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003280:	4c0b      	ldr	r4, [pc, #44]	; (80032b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003284:	e001      	b.n	800328a <LoopFillZerobss>

08003286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003288:	3204      	adds	r2, #4

0800328a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800328c:	d3fb      	bcc.n	8003286 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800328e:	f7ff ffab 	bl	80031e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003292:	f004 fb59 	bl	8007948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003296:	f7fd f959 	bl	800054c <main>
  bx  lr    
 800329a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800329c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80032a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80032a8:	08008058 	.word	0x08008058
  ldr r2, =_sbss
 80032ac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80032b0:	20000cac 	.word	0x20000cac

080032b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032b4:	e7fe      	b.n	80032b4 <ADC_IRQHandler>

080032b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032ba:	2003      	movs	r0, #3
 80032bc:	f000 f928 	bl	8003510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032c0:	2000      	movs	r0, #0
 80032c2:	f000 f805 	bl	80032d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032c6:	f7ff fd2d 	bl	8002d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032d8:	4b12      	ldr	r3, [pc, #72]	; (8003324 <HAL_InitTick+0x54>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_InitTick+0x58>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	4619      	mov	r1, r3
 80032e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f943 	bl	800357a <HAL_SYSTICK_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e00e      	b.n	800331c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b0f      	cmp	r3, #15
 8003302:	d80a      	bhi.n	800331a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003304:	2200      	movs	r2, #0
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800330c:	f000 f90b 	bl	8003526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003310:	4a06      	ldr	r2, [pc, #24]	; (800332c <HAL_InitTick+0x5c>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	e000      	b.n	800331c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
}
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	20000000 	.word	0x20000000
 8003328:	20000008 	.word	0x20000008
 800332c:	20000004 	.word	0x20000004

08003330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_IncTick+0x20>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_IncTick+0x24>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4413      	add	r3, r2
 8003340:	4a04      	ldr	r2, [pc, #16]	; (8003354 <HAL_IncTick+0x24>)
 8003342:	6013      	str	r3, [r2, #0]
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20000008 	.word	0x20000008
 8003354:	20000c98 	.word	0x20000c98

08003358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return uwTick;
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <HAL_GetTick+0x14>)
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000c98 	.word	0x20000c98

08003370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <__NVIC_SetPriorityGrouping+0x40>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800338c:	4013      	ands	r3, r2
 800338e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <__NVIC_SetPriorityGrouping+0x44>)
 800339a:	4313      	orrs	r3, r2
 800339c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800339e:	4a04      	ldr	r2, [pc, #16]	; (80033b0 <__NVIC_SetPriorityGrouping+0x40>)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	60d3      	str	r3, [r2, #12]
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000ed00 	.word	0xe000ed00
 80033b4:	05fa0000 	.word	0x05fa0000

080033b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <__NVIC_GetPriorityGrouping+0x18>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	f003 0307 	and.w	r3, r3, #7
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	db0b      	blt.n	80033fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	f003 021f 	and.w	r2, r3, #31
 80033ec:	4907      	ldr	r1, [pc, #28]	; (800340c <__NVIC_EnableIRQ+0x38>)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	2001      	movs	r0, #1
 80033f6:	fa00 f202 	lsl.w	r2, r0, r2
 80033fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000e100 	.word	0xe000e100

08003410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	6039      	str	r1, [r7, #0]
 800341a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003420:	2b00      	cmp	r3, #0
 8003422:	db0a      	blt.n	800343a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	b2da      	uxtb	r2, r3
 8003428:	490c      	ldr	r1, [pc, #48]	; (800345c <__NVIC_SetPriority+0x4c>)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	0112      	lsls	r2, r2, #4
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	440b      	add	r3, r1
 8003434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003438:	e00a      	b.n	8003450 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	4908      	ldr	r1, [pc, #32]	; (8003460 <__NVIC_SetPriority+0x50>)
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	3b04      	subs	r3, #4
 8003448:	0112      	lsls	r2, r2, #4
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	440b      	add	r3, r1
 800344e:	761a      	strb	r2, [r3, #24]
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000e100 	.word	0xe000e100
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003464:	b480      	push	{r7}
 8003466:	b089      	sub	sp, #36	; 0x24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f1c3 0307 	rsb	r3, r3, #7
 800347e:	2b04      	cmp	r3, #4
 8003480:	bf28      	it	cs
 8003482:	2304      	movcs	r3, #4
 8003484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3304      	adds	r3, #4
 800348a:	2b06      	cmp	r3, #6
 800348c:	d902      	bls.n	8003494 <NVIC_EncodePriority+0x30>
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3b03      	subs	r3, #3
 8003492:	e000      	b.n	8003496 <NVIC_EncodePriority+0x32>
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43da      	mvns	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	401a      	ands	r2, r3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	43d9      	mvns	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	4313      	orrs	r3, r2
         );
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3724      	adds	r7, #36	; 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034dc:	d301      	bcc.n	80034e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034de:	2301      	movs	r3, #1
 80034e0:	e00f      	b.n	8003502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <SysTick_Config+0x40>)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ea:	210f      	movs	r1, #15
 80034ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034f0:	f7ff ff8e 	bl	8003410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <SysTick_Config+0x40>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034fa:	4b04      	ldr	r3, [pc, #16]	; (800350c <SysTick_Config+0x40>)
 80034fc:	2207      	movs	r2, #7
 80034fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	e000e010 	.word	0xe000e010

08003510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff ff29 	bl	8003370 <__NVIC_SetPriorityGrouping>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003526:	b580      	push	{r7, lr}
 8003528:	b086      	sub	sp, #24
 800352a:	af00      	add	r7, sp, #0
 800352c:	4603      	mov	r3, r0
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003538:	f7ff ff3e 	bl	80033b8 <__NVIC_GetPriorityGrouping>
 800353c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	6978      	ldr	r0, [r7, #20]
 8003544:	f7ff ff8e 	bl	8003464 <NVIC_EncodePriority>
 8003548:	4602      	mov	r2, r0
 800354a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff ff5d 	bl	8003410 <__NVIC_SetPriority>
}
 8003556:	bf00      	nop
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff31 	bl	80033d4 <__NVIC_EnableIRQ>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff ffa2 	bl	80034cc <SysTick_Config>
 8003588:	4603      	mov	r3, r0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035a0:	f7ff feda 	bl	8003358 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e099      	b.n	80036e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d0:	e00f      	b.n	80035f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035d2:	f7ff fec1 	bl	8003358 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d908      	bls.n	80035f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2203      	movs	r2, #3
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e078      	b.n	80036e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e8      	bne.n	80035d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4b38      	ldr	r3, [pc, #224]	; (80036ec <HAL_DMA_Init+0x158>)
 800360c:	4013      	ands	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800361e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	2b04      	cmp	r3, #4
 800364a:	d107      	bne.n	800365c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	4313      	orrs	r3, r2
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0307 	bic.w	r3, r3, #7
 8003672:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2b04      	cmp	r3, #4
 8003684:	d117      	bne.n	80036b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fb09 	bl	8003cb0 <DMA_CheckFifoParam>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2240      	movs	r2, #64	; 0x40
 80036a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036b2:	2301      	movs	r3, #1
 80036b4:	e016      	b.n	80036e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fac0 	bl	8003c44 <DMA_CalcBaseAndBitshift>
 80036c4:	4603      	mov	r3, r0
 80036c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	223f      	movs	r2, #63	; 0x3f
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	e010803f 	.word	0xe010803f

080036f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_DMA_Start_IT+0x26>
 8003712:	2302      	movs	r3, #2
 8003714:	e048      	b.n	80037a8 <HAL_DMA_Start_IT+0xb8>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d137      	bne.n	800379a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fa52 	bl	8003be8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	223f      	movs	r2, #63	; 0x3f
 800374a:	409a      	lsls	r2, r3
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0216 	orr.w	r2, r2, #22
 800375e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800376e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0208 	orr.w	r2, r2, #8
 8003786:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e005      	b.n	80037a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037a2:	2302      	movs	r3, #2
 80037a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037be:	f7ff fdcb 	bl	8003358 <HAL_GetTick>
 80037c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d008      	beq.n	80037e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2280      	movs	r2, #128	; 0x80
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e052      	b.n	8003888 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0216 	bic.w	r2, r2, #22
 80037f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003800:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d103      	bne.n	8003812 <HAL_DMA_Abort+0x62>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0208 	bic.w	r2, r2, #8
 8003820:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003832:	e013      	b.n	800385c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003834:	f7ff fd90 	bl	8003358 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b05      	cmp	r3, #5
 8003840:	d90c      	bls.n	800385c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2203      	movs	r2, #3
 800384c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e015      	b.n	8003888 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e4      	bne.n	8003834 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	223f      	movs	r2, #63	; 0x3f
 8003870:	409a      	lsls	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d004      	beq.n	80038ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2280      	movs	r2, #128	; 0x80
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e00c      	b.n	80038c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2205      	movs	r2, #5
 80038b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80038e0:	4b8e      	ldr	r3, [pc, #568]	; (8003b1c <HAL_DMA_IRQHandler+0x248>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a8e      	ldr	r2, [pc, #568]	; (8003b20 <HAL_DMA_IRQHandler+0x24c>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	0a9b      	lsrs	r3, r3, #10
 80038ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	2208      	movs	r2, #8
 8003900:	409a      	lsls	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4013      	ands	r3, r2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d01a      	beq.n	8003940 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0204 	bic.w	r2, r2, #4
 8003926:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	2208      	movs	r2, #8
 800392e:	409a      	lsls	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003938:	f043 0201 	orr.w	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003944:	2201      	movs	r2, #1
 8003946:	409a      	lsls	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d012      	beq.n	8003976 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003962:	2201      	movs	r2, #1
 8003964:	409a      	lsls	r2, r3
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396e:	f043 0202 	orr.w	r2, r3, #2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	2204      	movs	r2, #4
 800397c:	409a      	lsls	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4013      	ands	r3, r2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d012      	beq.n	80039ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00b      	beq.n	80039ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	2204      	movs	r2, #4
 800399a:	409a      	lsls	r2, r3
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	f043 0204 	orr.w	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	2210      	movs	r2, #16
 80039b2:	409a      	lsls	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d043      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d03c      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	2210      	movs	r2, #16
 80039d0:	409a      	lsls	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d018      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d108      	bne.n	8003a04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d024      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
 8003a02:	e01f      	b.n	8003a44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01b      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	4798      	blx	r3
 8003a14:	e016      	b.n	8003a44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d107      	bne.n	8003a34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0208 	bic.w	r2, r2, #8
 8003a32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a48:	2220      	movs	r2, #32
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 808f 	beq.w	8003b74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8087 	beq.w	8003b74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b05      	cmp	r3, #5
 8003a7c:	d136      	bne.n	8003aec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0216 	bic.w	r2, r2, #22
 8003a8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695a      	ldr	r2, [r3, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d103      	bne.n	8003aae <HAL_DMA_IRQHandler+0x1da>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0208 	bic.w	r2, r2, #8
 8003abc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac2:	223f      	movs	r2, #63	; 0x3f
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d07e      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	4798      	blx	r3
        }
        return;
 8003aea:	e079      	b.n	8003be0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d01d      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10d      	bne.n	8003b24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d031      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
 8003b18:	e02c      	b.n	8003b74 <HAL_DMA_IRQHandler+0x2a0>
 8003b1a:	bf00      	nop
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d023      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	4798      	blx	r3
 8003b34:	e01e      	b.n	8003b74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10f      	bne.n	8003b64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0210 	bic.w	r2, r2, #16
 8003b52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d032      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d022      	beq.n	8003bce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2205      	movs	r2, #5
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d307      	bcc.n	8003bbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f2      	bne.n	8003ba0 <HAL_DMA_IRQHandler+0x2cc>
 8003bba:	e000      	b.n	8003bbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003bbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
 8003bde:	e000      	b.n	8003be2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003be0:	bf00      	nop
    }
  }
}
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d108      	bne.n	8003c28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c26:	e007      	b.n	8003c38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	60da      	str	r2, [r3, #12]
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	3b10      	subs	r3, #16
 8003c54:	4a13      	ldr	r2, [pc, #76]	; (8003ca4 <DMA_CalcBaseAndBitshift+0x60>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	091b      	lsrs	r3, r3, #4
 8003c5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c5e:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <DMA_CalcBaseAndBitshift+0x64>)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d908      	bls.n	8003c84 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <DMA_CalcBaseAndBitshift+0x68>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	1d1a      	adds	r2, r3, #4
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	659a      	str	r2, [r3, #88]	; 0x58
 8003c82:	e006      	b.n	8003c92 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <DMA_CalcBaseAndBitshift+0x68>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	aaaaaaab 	.word	0xaaaaaaab
 8003ca8:	0800803c 	.word	0x0800803c
 8003cac:	fffffc00 	.word	0xfffffc00

08003cb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d11f      	bne.n	8003d0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d856      	bhi.n	8003d7e <DMA_CheckFifoParam+0xce>
 8003cd0:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <DMA_CheckFifoParam+0x28>)
 8003cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd6:	bf00      	nop
 8003cd8:	08003ce9 	.word	0x08003ce9
 8003cdc:	08003cfb 	.word	0x08003cfb
 8003ce0:	08003ce9 	.word	0x08003ce9
 8003ce4:	08003d7f 	.word	0x08003d7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d046      	beq.n	8003d82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf8:	e043      	b.n	8003d82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d02:	d140      	bne.n	8003d86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d08:	e03d      	b.n	8003d86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d12:	d121      	bne.n	8003d58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d837      	bhi.n	8003d8a <DMA_CheckFifoParam+0xda>
 8003d1a:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <DMA_CheckFifoParam+0x70>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d31 	.word	0x08003d31
 8003d24:	08003d37 	.word	0x08003d37
 8003d28:	08003d31 	.word	0x08003d31
 8003d2c:	08003d49 	.word	0x08003d49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
      break;
 8003d34:	e030      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d025      	beq.n	8003d8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d46:	e022      	b.n	8003d8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d50:	d11f      	bne.n	8003d92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d56:	e01c      	b.n	8003d92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d903      	bls.n	8003d66 <DMA_CheckFifoParam+0xb6>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d003      	beq.n	8003d6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d64:	e018      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
      break;
 8003d6a:	e015      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00e      	beq.n	8003d96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d7c:	e00b      	b.n	8003d96 <DMA_CheckFifoParam+0xe6>
      break;
 8003d7e:	bf00      	nop
 8003d80:	e00a      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;
 8003d82:	bf00      	nop
 8003d84:	e008      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;
 8003d86:	bf00      	nop
 8003d88:	e006      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e004      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e002      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d92:	bf00      	nop
 8003d94:	e000      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;
 8003d96:	bf00      	nop
    }
  } 
  
  return status; 
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop

08003da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	e175      	b.n	80040b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003dc8:	2201      	movs	r2, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	f040 8164 	bne.w	80040ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d005      	beq.n	8003dfe <HAL_GPIO_Init+0x56>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d130      	bne.n	8003e60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	2203      	movs	r2, #3
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e34:	2201      	movs	r2, #1
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 0201 	and.w	r2, r3, #1
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d017      	beq.n	8003e9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	2203      	movs	r2, #3
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d123      	bne.n	8003ef0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	08da      	lsrs	r2, r3, #3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3208      	adds	r2, #8
 8003eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	220f      	movs	r2, #15
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	08da      	lsrs	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3208      	adds	r2, #8
 8003eea:	69b9      	ldr	r1, [r7, #24]
 8003eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	2203      	movs	r2, #3
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0203 	and.w	r2, r3, #3
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80be 	beq.w	80040ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f32:	4b66      	ldr	r3, [pc, #408]	; (80040cc <HAL_GPIO_Init+0x324>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	4a65      	ldr	r2, [pc, #404]	; (80040cc <HAL_GPIO_Init+0x324>)
 8003f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f3e:	4b63      	ldr	r3, [pc, #396]	; (80040cc <HAL_GPIO_Init+0x324>)
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f4a:	4a61      	ldr	r2, [pc, #388]	; (80040d0 <HAL_GPIO_Init+0x328>)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	3302      	adds	r3, #2
 8003f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	220f      	movs	r2, #15
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a58      	ldr	r2, [pc, #352]	; (80040d4 <HAL_GPIO_Init+0x32c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d037      	beq.n	8003fe6 <HAL_GPIO_Init+0x23e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a57      	ldr	r2, [pc, #348]	; (80040d8 <HAL_GPIO_Init+0x330>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d031      	beq.n	8003fe2 <HAL_GPIO_Init+0x23a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a56      	ldr	r2, [pc, #344]	; (80040dc <HAL_GPIO_Init+0x334>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d02b      	beq.n	8003fde <HAL_GPIO_Init+0x236>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a55      	ldr	r2, [pc, #340]	; (80040e0 <HAL_GPIO_Init+0x338>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d025      	beq.n	8003fda <HAL_GPIO_Init+0x232>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a54      	ldr	r2, [pc, #336]	; (80040e4 <HAL_GPIO_Init+0x33c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d01f      	beq.n	8003fd6 <HAL_GPIO_Init+0x22e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a53      	ldr	r2, [pc, #332]	; (80040e8 <HAL_GPIO_Init+0x340>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d019      	beq.n	8003fd2 <HAL_GPIO_Init+0x22a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a52      	ldr	r2, [pc, #328]	; (80040ec <HAL_GPIO_Init+0x344>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d013      	beq.n	8003fce <HAL_GPIO_Init+0x226>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a51      	ldr	r2, [pc, #324]	; (80040f0 <HAL_GPIO_Init+0x348>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00d      	beq.n	8003fca <HAL_GPIO_Init+0x222>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a50      	ldr	r2, [pc, #320]	; (80040f4 <HAL_GPIO_Init+0x34c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d007      	beq.n	8003fc6 <HAL_GPIO_Init+0x21e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a4f      	ldr	r2, [pc, #316]	; (80040f8 <HAL_GPIO_Init+0x350>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d101      	bne.n	8003fc2 <HAL_GPIO_Init+0x21a>
 8003fbe:	2309      	movs	r3, #9
 8003fc0:	e012      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fc2:	230a      	movs	r3, #10
 8003fc4:	e010      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	e00e      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fca:	2307      	movs	r3, #7
 8003fcc:	e00c      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fce:	2306      	movs	r3, #6
 8003fd0:	e00a      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fd2:	2305      	movs	r3, #5
 8003fd4:	e008      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fd6:	2304      	movs	r3, #4
 8003fd8:	e006      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e004      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e002      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <HAL_GPIO_Init+0x240>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	f002 0203 	and.w	r2, r2, #3
 8003fee:	0092      	lsls	r2, r2, #2
 8003ff0:	4093      	lsls	r3, r2
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ff8:	4935      	ldr	r1, [pc, #212]	; (80040d0 <HAL_GPIO_Init+0x328>)
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	089b      	lsrs	r3, r3, #2
 8003ffe:	3302      	adds	r3, #2
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004006:	4b3d      	ldr	r3, [pc, #244]	; (80040fc <HAL_GPIO_Init+0x354>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800402a:	4a34      	ldr	r2, [pc, #208]	; (80040fc <HAL_GPIO_Init+0x354>)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004030:	4b32      	ldr	r3, [pc, #200]	; (80040fc <HAL_GPIO_Init+0x354>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004054:	4a29      	ldr	r2, [pc, #164]	; (80040fc <HAL_GPIO_Init+0x354>)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800405a:	4b28      	ldr	r3, [pc, #160]	; (80040fc <HAL_GPIO_Init+0x354>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	43db      	mvns	r3, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4013      	ands	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800407e:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <HAL_GPIO_Init+0x354>)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004084:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_GPIO_Init+0x354>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040a8:	4a14      	ldr	r2, [pc, #80]	; (80040fc <HAL_GPIO_Init+0x354>)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3301      	adds	r3, #1
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b0f      	cmp	r3, #15
 80040b8:	f67f ae86 	bls.w	8003dc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80040bc:	bf00      	nop
 80040be:	bf00      	nop
 80040c0:	3724      	adds	r7, #36	; 0x24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40013800 	.word	0x40013800
 80040d4:	40020000 	.word	0x40020000
 80040d8:	40020400 	.word	0x40020400
 80040dc:	40020800 	.word	0x40020800
 80040e0:	40020c00 	.word	0x40020c00
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40021400 	.word	0x40021400
 80040ec:	40021800 	.word	0x40021800
 80040f0:	40021c00 	.word	0x40021c00
 80040f4:	40022000 	.word	0x40022000
 80040f8:	40022400 	.word	0x40022400
 80040fc:	40013c00 	.word	0x40013c00

08004100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	807b      	strh	r3, [r7, #2]
 800410c:	4613      	mov	r3, r2
 800410e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004110:	787b      	ldrb	r3, [r7, #1]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800411c:	e003      	b.n	8004126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800411e:	887b      	ldrh	r3, [r7, #2]
 8004120:	041a      	lsls	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	619a      	str	r2, [r3, #24]
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
	...

08004134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e07f      	b.n	8004246 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fe fe06 	bl	8002d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2224      	movs	r2, #36	; 0x24
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0201 	bic.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004184:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004194:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d107      	bne.n	80041ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	e006      	b.n	80041bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d104      	bne.n	80041ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <HAL_I2C_Init+0x11c>)
 80041da:	430b      	orrs	r3, r1
 80041dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69d9      	ldr	r1, [r3, #28]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1a      	ldr	r2, [r3, #32]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	02008000 	.word	0x02008000

08004254 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b20      	cmp	r3, #32
 8004268:	d138      	bne.n	80042dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004274:	2302      	movs	r3, #2
 8004276:	e032      	b.n	80042de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2224      	movs	r2, #36	; 0x24
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6819      	ldr	r1, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	e000      	b.n	80042de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042dc:	2302      	movs	r3, #2
  }
}
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d139      	bne.n	8004374 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800430a:	2302      	movs	r3, #2
 800430c:	e033      	b.n	8004376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2224      	movs	r2, #36	; 0x24
 800431a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0201 	bic.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800433c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	e000      	b.n	8004376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004374:	2302      	movs	r3, #2
  }
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800438e:	4b23      	ldr	r3, [pc, #140]	; (800441c <HAL_PWREx_EnableOverDrive+0x98>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	4a22      	ldr	r2, [pc, #136]	; (800441c <HAL_PWREx_EnableOverDrive+0x98>)
 8004394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004398:	6413      	str	r3, [r2, #64]	; 0x40
 800439a:	4b20      	ldr	r3, [pc, #128]	; (800441c <HAL_PWREx_EnableOverDrive+0x98>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80043a6:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1d      	ldr	r2, [pc, #116]	; (8004420 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043b2:	f7fe ffd1 	bl	8003358 <HAL_GetTick>
 80043b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043b8:	e009      	b.n	80043ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043ba:	f7fe ffcd 	bl	8003358 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043c8:	d901      	bls.n	80043ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e022      	b.n	8004414 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043ce:	4b14      	ldr	r3, [pc, #80]	; (8004420 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043da:	d1ee      	bne.n	80043ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043dc:	4b10      	ldr	r3, [pc, #64]	; (8004420 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0f      	ldr	r2, [pc, #60]	; (8004420 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043e8:	f7fe ffb6 	bl	8003358 <HAL_GetTick>
 80043ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043ee:	e009      	b.n	8004404 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043f0:	f7fe ffb2 	bl	8003358 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043fe:	d901      	bls.n	8004404 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e007      	b.n	8004414 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004410:	d1ee      	bne.n	80043f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	40007000 	.word	0x40007000

08004424 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800442c:	2300      	movs	r3, #0
 800442e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e29b      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8087 	beq.w	8004556 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004448:	4b96      	ldr	r3, [pc, #600]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 030c 	and.w	r3, r3, #12
 8004450:	2b04      	cmp	r3, #4
 8004452:	d00c      	beq.n	800446e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004454:	4b93      	ldr	r3, [pc, #588]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 030c 	and.w	r3, r3, #12
 800445c:	2b08      	cmp	r3, #8
 800445e:	d112      	bne.n	8004486 <HAL_RCC_OscConfig+0x62>
 8004460:	4b90      	ldr	r3, [pc, #576]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800446c:	d10b      	bne.n	8004486 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446e:	4b8d      	ldr	r3, [pc, #564]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d06c      	beq.n	8004554 <HAL_RCC_OscConfig+0x130>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d168      	bne.n	8004554 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e275      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448e:	d106      	bne.n	800449e <HAL_RCC_OscConfig+0x7a>
 8004490:	4b84      	ldr	r3, [pc, #528]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a83      	ldr	r2, [pc, #524]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e02e      	b.n	80044fc <HAL_RCC_OscConfig+0xd8>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x9c>
 80044a6:	4b7f      	ldr	r3, [pc, #508]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a7e      	ldr	r2, [pc, #504]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	4b7c      	ldr	r3, [pc, #496]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a7b      	ldr	r2, [pc, #492]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	e01d      	b.n	80044fc <HAL_RCC_OscConfig+0xd8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0xc0>
 80044ca:	4b76      	ldr	r3, [pc, #472]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a75      	ldr	r2, [pc, #468]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b73      	ldr	r3, [pc, #460]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a72      	ldr	r2, [pc, #456]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e00b      	b.n	80044fc <HAL_RCC_OscConfig+0xd8>
 80044e4:	4b6f      	ldr	r3, [pc, #444]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a6e      	ldr	r2, [pc, #440]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	4b6c      	ldr	r3, [pc, #432]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a6b      	ldr	r2, [pc, #428]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d013      	beq.n	800452c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fe ff28 	bl	8003358 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800450c:	f7fe ff24 	bl	8003358 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b64      	cmp	r3, #100	; 0x64
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e229      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451e:	4b61      	ldr	r3, [pc, #388]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0xe8>
 800452a:	e014      	b.n	8004556 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fe ff14 	bl	8003358 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004534:	f7fe ff10 	bl	8003358 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e215      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004546:	4b57      	ldr	r3, [pc, #348]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x110>
 8004552:	e000      	b.n	8004556 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d069      	beq.n	8004636 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004562:	4b50      	ldr	r3, [pc, #320]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00b      	beq.n	8004586 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800456e:	4b4d      	ldr	r3, [pc, #308]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
 8004576:	2b08      	cmp	r3, #8
 8004578:	d11c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x190>
 800457a:	4b4a      	ldr	r3, [pc, #296]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d116      	bne.n	80045b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004586:	4b47      	ldr	r3, [pc, #284]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <HAL_RCC_OscConfig+0x17a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d001      	beq.n	800459e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e1e9      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459e:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	493d      	ldr	r1, [pc, #244]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b2:	e040      	b.n	8004636 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d023      	beq.n	8004604 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045bc:	4b39      	ldr	r3, [pc, #228]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a38      	ldr	r2, [pc, #224]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fe fec6 	bl	8003358 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d0:	f7fe fec2 	bl	8003358 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e1c7      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e2:	4b30      	ldr	r3, [pc, #192]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ee:	4b2d      	ldr	r3, [pc, #180]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4929      	ldr	r1, [pc, #164]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]
 8004602:	e018      	b.n	8004636 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004604:	4b27      	ldr	r3, [pc, #156]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a26      	ldr	r2, [pc, #152]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 800460a:	f023 0301 	bic.w	r3, r3, #1
 800460e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004610:	f7fe fea2 	bl	8003358 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004618:	f7fe fe9e 	bl	8003358 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e1a3      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462a:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d038      	beq.n	80046b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d019      	beq.n	800467e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800464a:	4b16      	ldr	r3, [pc, #88]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 800464c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464e:	4a15      	ldr	r2, [pc, #84]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004656:	f7fe fe7f 	bl	8003358 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800465e:	f7fe fe7b 	bl	8003358 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e180      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004670:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x23a>
 800467c:	e01a      	b.n	80046b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004682:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468a:	f7fe fe65 	bl	8003358 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004690:	e00a      	b.n	80046a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004692:	f7fe fe61 	bl	8003358 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d903      	bls.n	80046a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e166      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>
 80046a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a8:	4b92      	ldr	r3, [pc, #584]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 80046aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1ee      	bne.n	8004692 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80a4 	beq.w	800480a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c2:	4b8c      	ldr	r3, [pc, #560]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10d      	bne.n	80046ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ce:	4b89      	ldr	r3, [pc, #548]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	4a88      	ldr	r2, [pc, #544]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 80046d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d8:	6413      	str	r3, [r2, #64]	; 0x40
 80046da:	4b86      	ldr	r3, [pc, #536]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e6:	2301      	movs	r3, #1
 80046e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ea:	4b83      	ldr	r3, [pc, #524]	; (80048f8 <HAL_RCC_OscConfig+0x4d4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d118      	bne.n	8004728 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046f6:	4b80      	ldr	r3, [pc, #512]	; (80048f8 <HAL_RCC_OscConfig+0x4d4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a7f      	ldr	r2, [pc, #508]	; (80048f8 <HAL_RCC_OscConfig+0x4d4>)
 80046fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004702:	f7fe fe29 	bl	8003358 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800470a:	f7fe fe25 	bl	8003358 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b64      	cmp	r3, #100	; 0x64
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e12a      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800471c:	4b76      	ldr	r3, [pc, #472]	; (80048f8 <HAL_RCC_OscConfig+0x4d4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f0      	beq.n	800470a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d106      	bne.n	800473e <HAL_RCC_OscConfig+0x31a>
 8004730:	4b70      	ldr	r3, [pc, #448]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	4a6f      	ldr	r2, [pc, #444]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	6713      	str	r3, [r2, #112]	; 0x70
 800473c:	e02d      	b.n	800479a <HAL_RCC_OscConfig+0x376>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10c      	bne.n	8004760 <HAL_RCC_OscConfig+0x33c>
 8004746:	4b6b      	ldr	r3, [pc, #428]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474a:	4a6a      	ldr	r2, [pc, #424]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 800474c:	f023 0301 	bic.w	r3, r3, #1
 8004750:	6713      	str	r3, [r2, #112]	; 0x70
 8004752:	4b68      	ldr	r3, [pc, #416]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	4a67      	ldr	r2, [pc, #412]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004758:	f023 0304 	bic.w	r3, r3, #4
 800475c:	6713      	str	r3, [r2, #112]	; 0x70
 800475e:	e01c      	b.n	800479a <HAL_RCC_OscConfig+0x376>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b05      	cmp	r3, #5
 8004766:	d10c      	bne.n	8004782 <HAL_RCC_OscConfig+0x35e>
 8004768:	4b62      	ldr	r3, [pc, #392]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476c:	4a61      	ldr	r2, [pc, #388]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 800476e:	f043 0304 	orr.w	r3, r3, #4
 8004772:	6713      	str	r3, [r2, #112]	; 0x70
 8004774:	4b5f      	ldr	r3, [pc, #380]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	4a5e      	ldr	r2, [pc, #376]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 800477a:	f043 0301 	orr.w	r3, r3, #1
 800477e:	6713      	str	r3, [r2, #112]	; 0x70
 8004780:	e00b      	b.n	800479a <HAL_RCC_OscConfig+0x376>
 8004782:	4b5c      	ldr	r3, [pc, #368]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	4a5b      	ldr	r2, [pc, #364]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	6713      	str	r3, [r2, #112]	; 0x70
 800478e:	4b59      	ldr	r3, [pc, #356]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	4a58      	ldr	r2, [pc, #352]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004794:	f023 0304 	bic.w	r3, r3, #4
 8004798:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d015      	beq.n	80047ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a2:	f7fe fdd9 	bl	8003358 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a8:	e00a      	b.n	80047c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047aa:	f7fe fdd5 	bl	8003358 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e0d8      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c0:	4b4c      	ldr	r3, [pc, #304]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0ee      	beq.n	80047aa <HAL_RCC_OscConfig+0x386>
 80047cc:	e014      	b.n	80047f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ce:	f7fe fdc3 	bl	8003358 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d4:	e00a      	b.n	80047ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d6:	f7fe fdbf 	bl	8003358 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e0c2      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ec:	4b41      	ldr	r3, [pc, #260]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1ee      	bne.n	80047d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047f8:	7dfb      	ldrb	r3, [r7, #23]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d105      	bne.n	800480a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fe:	4b3d      	ldr	r3, [pc, #244]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	4a3c      	ldr	r2, [pc, #240]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004808:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80ae 	beq.w	8004970 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004814:	4b37      	ldr	r3, [pc, #220]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 030c 	and.w	r3, r3, #12
 800481c:	2b08      	cmp	r3, #8
 800481e:	d06d      	beq.n	80048fc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	2b02      	cmp	r3, #2
 8004826:	d14b      	bne.n	80048c0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004828:	4b32      	ldr	r3, [pc, #200]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a31      	ldr	r2, [pc, #196]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 800482e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004834:	f7fe fd90 	bl	8003358 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800483c:	f7fe fd8c 	bl	8003358 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e091      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484e:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f0      	bne.n	800483c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69da      	ldr	r2, [r3, #28]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	019b      	lsls	r3, r3, #6
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	085b      	lsrs	r3, r3, #1
 8004872:	3b01      	subs	r3, #1
 8004874:	041b      	lsls	r3, r3, #16
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	061b      	lsls	r3, r3, #24
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	071b      	lsls	r3, r3, #28
 8004886:	491b      	ldr	r1, [pc, #108]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800488c:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a18      	ldr	r2, [pc, #96]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 8004892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fe fd5e 	bl	8003358 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fe fd5a 	bl	8003358 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e05f      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b2:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0x47c>
 80048be:	e057      	b.n	8004970 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c0:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a0b      	ldr	r2, [pc, #44]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 80048c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048cc:	f7fe fd44 	bl	8003358 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fe fd40 	bl	8003358 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e045      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	4b03      	ldr	r3, [pc, #12]	; (80048f4 <HAL_RCC_OscConfig+0x4d0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x4b0>
 80048f2:	e03d      	b.n	8004970 <HAL_RCC_OscConfig+0x54c>
 80048f4:	40023800 	.word	0x40023800
 80048f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80048fc:	4b1f      	ldr	r3, [pc, #124]	; (800497c <HAL_RCC_OscConfig+0x558>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d030      	beq.n	800496c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d129      	bne.n	800496c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d122      	bne.n	800496c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800492c:	4013      	ands	r3, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004932:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004934:	4293      	cmp	r3, r2
 8004936:	d119      	bne.n	800496c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	3b01      	subs	r3, #1
 8004946:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004948:	429a      	cmp	r2, r3
 800494a:	d10f      	bne.n	800496c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004958:	429a      	cmp	r2, r3
 800495a:	d107      	bne.n	800496c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004968:	429a      	cmp	r2, r3
 800496a:	d001      	beq.n	8004970 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40023800 	.word	0x40023800

08004980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0d0      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004998:	4b6a      	ldr	r3, [pc, #424]	; (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d910      	bls.n	80049c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b67      	ldr	r3, [pc, #412]	; (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 020f 	bic.w	r2, r3, #15
 80049ae:	4965      	ldr	r1, [pc, #404]	; (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	4b63      	ldr	r3, [pc, #396]	; (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0b8      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d020      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e0:	4b59      	ldr	r3, [pc, #356]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	4a58      	ldr	r2, [pc, #352]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 80049e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f8:	4b53      	ldr	r3, [pc, #332]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4a52      	ldr	r2, [pc, #328]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 80049fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a04:	4b50      	ldr	r3, [pc, #320]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	494d      	ldr	r1, [pc, #308]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d040      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2a:	4b47      	ldr	r3, [pc, #284]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d115      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e07f      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d107      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a42:	4b41      	ldr	r3, [pc, #260]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e073      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a52:	4b3d      	ldr	r3, [pc, #244]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e06b      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a62:	4b39      	ldr	r3, [pc, #228]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f023 0203 	bic.w	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	4936      	ldr	r1, [pc, #216]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a74:	f7fe fc70 	bl	8003358 <HAL_GetTick>
 8004a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a7c:	f7fe fc6c 	bl	8003358 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e053      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a92:	4b2d      	ldr	r3, [pc, #180]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 020c 	and.w	r2, r3, #12
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d1eb      	bne.n	8004a7c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa4:	4b27      	ldr	r3, [pc, #156]	; (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d210      	bcs.n	8004ad4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab2:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 020f 	bic.w	r2, r3, #15
 8004aba:	4922      	ldr	r1, [pc, #136]	; (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac2:	4b20      	ldr	r3, [pc, #128]	; (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e032      	b.n	8004b3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d008      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae0:	4b19      	ldr	r3, [pc, #100]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	4916      	ldr	r1, [pc, #88]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d009      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004afe:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	490e      	ldr	r1, [pc, #56]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b12:	f000 f821 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8004b16:	4602      	mov	r2, r0
 8004b18:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	490a      	ldr	r1, [pc, #40]	; (8004b4c <HAL_RCC_ClockConfig+0x1cc>)
 8004b24:	5ccb      	ldrb	r3, [r1, r3]
 8004b26:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2a:	4a09      	ldr	r2, [pc, #36]	; (8004b50 <HAL_RCC_ClockConfig+0x1d0>)
 8004b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b2e:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <HAL_RCC_ClockConfig+0x1d4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe fbcc 	bl	80032d0 <HAL_InitTick>

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40023c00 	.word	0x40023c00
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	08008024 	.word	0x08008024
 8004b50:	20000000 	.word	0x20000000
 8004b54:	20000004 	.word	0x20000004

08004b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b5c:	b090      	sub	sp, #64	; 0x40
 8004b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	637b      	str	r3, [r7, #52]	; 0x34
 8004b64:	2300      	movs	r3, #0
 8004b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b68:	2300      	movs	r3, #0
 8004b6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b70:	4b59      	ldr	r3, [pc, #356]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 030c 	and.w	r3, r3, #12
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d00d      	beq.n	8004b98 <HAL_RCC_GetSysClockFreq+0x40>
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	f200 80a1 	bhi.w	8004cc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x34>
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d003      	beq.n	8004b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b8a:	e09b      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b8c:	4b53      	ldr	r3, [pc, #332]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8004b8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b90:	e09b      	b.n	8004cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b92:	4b53      	ldr	r3, [pc, #332]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b96:	e098      	b.n	8004cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b98:	4b4f      	ldr	r3, [pc, #316]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ba2:	4b4d      	ldr	r3, [pc, #308]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d028      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bae:	4b4a      	ldr	r3, [pc, #296]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	099b      	lsrs	r3, r3, #6
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	623b      	str	r3, [r7, #32]
 8004bb8:	627a      	str	r2, [r7, #36]	; 0x24
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4b47      	ldr	r3, [pc, #284]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bc4:	fb03 f201 	mul.w	r2, r3, r1
 8004bc8:	2300      	movs	r3, #0
 8004bca:	fb00 f303 	mul.w	r3, r0, r3
 8004bce:	4413      	add	r3, r2
 8004bd0:	4a43      	ldr	r2, [pc, #268]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bd2:	fba0 1202 	umull	r1, r2, r0, r2
 8004bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bd8:	460a      	mov	r2, r1
 8004bda:	62ba      	str	r2, [r7, #40]	; 0x28
 8004bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bde:	4413      	add	r3, r2
 8004be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be4:	2200      	movs	r2, #0
 8004be6:	61bb      	str	r3, [r7, #24]
 8004be8:	61fa      	str	r2, [r7, #28]
 8004bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004bf2:	f7fb fb29 	bl	8000248 <__aeabi_uldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bfe:	e053      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c00:	4b35      	ldr	r3, [pc, #212]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	099b      	lsrs	r3, r3, #6
 8004c06:	2200      	movs	r2, #0
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	617a      	str	r2, [r7, #20]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c12:	f04f 0b00 	mov.w	fp, #0
 8004c16:	4652      	mov	r2, sl
 8004c18:	465b      	mov	r3, fp
 8004c1a:	f04f 0000 	mov.w	r0, #0
 8004c1e:	f04f 0100 	mov.w	r1, #0
 8004c22:	0159      	lsls	r1, r3, #5
 8004c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c28:	0150      	lsls	r0, r2, #5
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	ebb2 080a 	subs.w	r8, r2, sl
 8004c32:	eb63 090b 	sbc.w	r9, r3, fp
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c4a:	ebb2 0408 	subs.w	r4, r2, r8
 8004c4e:	eb63 0509 	sbc.w	r5, r3, r9
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	00eb      	lsls	r3, r5, #3
 8004c5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c60:	00e2      	lsls	r2, r4, #3
 8004c62:	4614      	mov	r4, r2
 8004c64:	461d      	mov	r5, r3
 8004c66:	eb14 030a 	adds.w	r3, r4, sl
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	eb45 030b 	adc.w	r3, r5, fp
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c7e:	4629      	mov	r1, r5
 8004c80:	028b      	lsls	r3, r1, #10
 8004c82:	4621      	mov	r1, r4
 8004c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c88:	4621      	mov	r1, r4
 8004c8a:	028a      	lsls	r2, r1, #10
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c92:	2200      	movs	r2, #0
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	60fa      	str	r2, [r7, #12]
 8004c98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c9c:	f7fb fad4 	bl	8000248 <__aeabi_uldivmod>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	0c1b      	lsrs	r3, r3, #16
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004cb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004cc2:	e002      	b.n	8004cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cc4:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8004cc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3740      	adds	r7, #64	; 0x40
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	00f42400 	.word	0x00f42400
 8004ce0:	018cba80 	.word	0x018cba80

08004ce4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ce8:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cea:	681b      	ldr	r3, [r3, #0]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000000 	.word	0x20000000

08004cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d00:	f7ff fff0 	bl	8004ce4 <HAL_RCC_GetHCLKFreq>
 8004d04:	4602      	mov	r2, r0
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	0a9b      	lsrs	r3, r3, #10
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	4903      	ldr	r1, [pc, #12]	; (8004d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d12:	5ccb      	ldrb	r3, [r1, r3]
 8004d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	08008034 	.word	0x08008034

08004d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d28:	f7ff ffdc 	bl	8004ce4 <HAL_RCC_GetHCLKFreq>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	0b5b      	lsrs	r3, r3, #13
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	4903      	ldr	r1, [pc, #12]	; (8004d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d3a:	5ccb      	ldrb	r3, [r1, r3]
 8004d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40023800 	.word	0x40023800
 8004d48:	08008034 	.word	0x08008034

08004d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d012      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d74:	4b69      	ldr	r3, [pc, #420]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	4a68      	ldr	r2, [pc, #416]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d7e:	6093      	str	r3, [r2, #8]
 8004d80:	4b66      	ldr	r3, [pc, #408]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	4964      	ldr	r1, [pc, #400]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d96:	2301      	movs	r3, #1
 8004d98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d017      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004da6:	4b5d      	ldr	r3, [pc, #372]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db4:	4959      	ldr	r1, [pc, #356]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dc4:	d101      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d017      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004de2:	4b4e      	ldr	r3, [pc, #312]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004de8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	494a      	ldr	r1, [pc, #296]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e00:	d101      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e02:	2301      	movs	r3, #1
 8004e04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 808b 	beq.w	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e30:	4b3a      	ldr	r3, [pc, #232]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	4a39      	ldr	r2, [pc, #228]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e3c:	4b37      	ldr	r3, [pc, #220]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e48:	4b35      	ldr	r3, [pc, #212]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a34      	ldr	r2, [pc, #208]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e54:	f7fe fa80 	bl	8003358 <HAL_GetTick>
 8004e58:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e5c:	f7fe fa7c 	bl	8003358 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b64      	cmp	r3, #100	; 0x64
 8004e68:	d901      	bls.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e38f      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e6e:	4b2c      	ldr	r3, [pc, #176]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e7a:	4b28      	ldr	r3, [pc, #160]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d035      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d02e      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e98:	4b20      	ldr	r3, [pc, #128]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ea2:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eae:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	4a1a      	ldr	r2, [pc, #104]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004eba:	4a18      	ldr	r2, [pc, #96]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ec0:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d114      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ecc:	f7fe fa44 	bl	8003358 <HAL_GetTick>
 8004ed0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed2:	e00a      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed4:	f7fe fa40 	bl	8003358 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e351      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0ee      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f02:	d111      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f04:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f12:	400b      	ands	r3, r1
 8004f14:	4901      	ldr	r1, [pc, #4]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	608b      	str	r3, [r1, #8]
 8004f1a:	e00b      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	40007000 	.word	0x40007000
 8004f24:	0ffffcff 	.word	0x0ffffcff
 8004f28:	4bac      	ldr	r3, [pc, #688]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	4aab      	ldr	r2, [pc, #684]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f32:	6093      	str	r3, [r2, #8]
 8004f34:	4ba9      	ldr	r3, [pc, #676]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f40:	49a6      	ldr	r1, [pc, #664]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0310 	and.w	r3, r3, #16
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d010      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f52:	4ba2      	ldr	r3, [pc, #648]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f58:	4aa0      	ldr	r2, [pc, #640]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f62:	4b9e      	ldr	r3, [pc, #632]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	499b      	ldr	r1, [pc, #620]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f80:	4b96      	ldr	r3, [pc, #600]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f8e:	4993      	ldr	r1, [pc, #588]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fa2:	4b8e      	ldr	r3, [pc, #568]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fb0:	498a      	ldr	r1, [pc, #552]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fc4:	4b85      	ldr	r3, [pc, #532]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd2:	4982      	ldr	r1, [pc, #520]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fe6:	4b7d      	ldr	r3, [pc, #500]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff4:	4979      	ldr	r1, [pc, #484]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005008:	4b74      	ldr	r3, [pc, #464]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f023 0203 	bic.w	r2, r3, #3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	4971      	ldr	r1, [pc, #452]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800502a:	4b6c      	ldr	r3, [pc, #432]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	f023 020c 	bic.w	r2, r3, #12
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005038:	4968      	ldr	r1, [pc, #416]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800504c:	4b63      	ldr	r3, [pc, #396]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	4960      	ldr	r1, [pc, #384]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800506e:	4b5b      	ldr	r3, [pc, #364]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005074:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507c:	4957      	ldr	r1, [pc, #348]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005090:	4b52      	ldr	r3, [pc, #328]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005096:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	494f      	ldr	r1, [pc, #316]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80050b2:	4b4a      	ldr	r3, [pc, #296]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c0:	4946      	ldr	r1, [pc, #280]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80050d4:	4b41      	ldr	r3, [pc, #260]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e2:	493e      	ldr	r1, [pc, #248]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80050f6:	4b39      	ldr	r3, [pc, #228]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005104:	4935      	ldr	r1, [pc, #212]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005118:	4b30      	ldr	r3, [pc, #192]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005126:	492d      	ldr	r1, [pc, #180]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d011      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800513a:	4b28      	ldr	r3, [pc, #160]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005140:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005148:	4924      	ldr	r1, [pc, #144]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005158:	d101      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800515a:	2301      	movs	r3, #1
 800515c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800516a:	2301      	movs	r3, #1
 800516c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800517a:	4b18      	ldr	r3, [pc, #96]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800517c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005180:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005188:	4914      	ldr	r1, [pc, #80]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00b      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800519c:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800519e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ac:	490b      	ldr	r1, [pc, #44]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00f      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80051c0:	4b06      	ldr	r3, [pc, #24]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051d0:	4902      	ldr	r1, [pc, #8]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051d8:	e002      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80051da:	bf00      	nop
 80051dc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00b      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051ec:	4b8a      	ldr	r3, [pc, #552]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fc:	4986      	ldr	r1, [pc, #536]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00b      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005210:	4b81      	ldr	r3, [pc, #516]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005216:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005220:	497d      	ldr	r1, [pc, #500]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d006      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 80d6 	beq.w	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800523c:	4b76      	ldr	r3, [pc, #472]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a75      	ldr	r2, [pc, #468]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005242:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005248:	f7fe f886 	bl	8003358 <HAL_GetTick>
 800524c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005250:	f7fe f882 	bl	8003358 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	; 0x64
 800525c:	d901      	bls.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e195      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005262:	4b6d      	ldr	r3, [pc, #436]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d021      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x572>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	2b00      	cmp	r3, #0
 8005280:	d11d      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005282:	4b65      	ldr	r3, [pc, #404]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005288:	0c1b      	lsrs	r3, r3, #16
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005290:	4b61      	ldr	r3, [pc, #388]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005296:	0e1b      	lsrs	r3, r3, #24
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	019a      	lsls	r2, r3, #6
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	041b      	lsls	r3, r3, #16
 80052a8:	431a      	orrs	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	061b      	lsls	r3, r3, #24
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	071b      	lsls	r3, r3, #28
 80052b6:	4958      	ldr	r1, [pc, #352]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d004      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052d2:	d00a      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d02e      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052e8:	d129      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052ea:	4b4b      	ldr	r3, [pc, #300]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f0:	0c1b      	lsrs	r3, r3, #16
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052f8:	4b47      	ldr	r3, [pc, #284]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052fe:	0f1b      	lsrs	r3, r3, #28
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	019a      	lsls	r2, r3, #6
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	041b      	lsls	r3, r3, #16
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	061b      	lsls	r3, r3, #24
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	071b      	lsls	r3, r3, #28
 800531e:	493e      	ldr	r1, [pc, #248]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005326:	4b3c      	ldr	r3, [pc, #240]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800532c:	f023 021f 	bic.w	r2, r3, #31
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	3b01      	subs	r3, #1
 8005336:	4938      	ldr	r1, [pc, #224]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d01d      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800534a:	4b33      	ldr	r3, [pc, #204]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800534c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005350:	0e1b      	lsrs	r3, r3, #24
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005358:	4b2f      	ldr	r3, [pc, #188]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800535a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800535e:	0f1b      	lsrs	r3, r3, #28
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	019a      	lsls	r2, r3, #6
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	431a      	orrs	r2, r3
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	061b      	lsls	r3, r3, #24
 8005378:	431a      	orrs	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	071b      	lsls	r3, r3, #28
 800537e:	4926      	ldr	r1, [pc, #152]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d011      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	019a      	lsls	r2, r3, #6
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	041b      	lsls	r3, r3, #16
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	061b      	lsls	r3, r3, #24
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	071b      	lsls	r3, r3, #28
 80053ae:	491a      	ldr	r1, [pc, #104]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053b6:	4b18      	ldr	r3, [pc, #96]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a17      	ldr	r2, [pc, #92]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c2:	f7fd ffc9 	bl	8003358 <HAL_GetTick>
 80053c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053c8:	e008      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053ca:	f7fd ffc5 	bl	8003358 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b64      	cmp	r3, #100	; 0x64
 80053d6:	d901      	bls.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e0d8      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053dc:	4b0e      	ldr	r3, [pc, #56]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0f0      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	f040 80ce 	bne.w	800558c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80053f0:	4b09      	ldr	r3, [pc, #36]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a08      	ldr	r2, [pc, #32]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fc:	f7fd ffac 	bl	8003358 <HAL_GetTick>
 8005400:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005402:	e00b      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005404:	f7fd ffa8 	bl	8003358 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d904      	bls.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e0bb      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005416:	bf00      	nop
 8005418:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800541c:	4b5e      	ldr	r3, [pc, #376]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005428:	d0ec      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005446:	2b00      	cmp	r3, #0
 8005448:	d02e      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d12a      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005452:	4b51      	ldr	r3, [pc, #324]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	0c1b      	lsrs	r3, r3, #16
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005460:	4b4d      	ldr	r3, [pc, #308]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	0f1b      	lsrs	r3, r3, #28
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	019a      	lsls	r2, r3, #6
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	041b      	lsls	r3, r3, #16
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	061b      	lsls	r3, r3, #24
 8005480:	431a      	orrs	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	071b      	lsls	r3, r3, #28
 8005486:	4944      	ldr	r1, [pc, #272]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800548e:	4b42      	ldr	r3, [pc, #264]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005494:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	3b01      	subs	r3, #1
 800549e:	021b      	lsls	r3, r3, #8
 80054a0:	493d      	ldr	r1, [pc, #244]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d022      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054bc:	d11d      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054be:	4b36      	ldr	r3, [pc, #216]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c4:	0e1b      	lsrs	r3, r3, #24
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054cc:	4b32      	ldr	r3, [pc, #200]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	0f1b      	lsrs	r3, r3, #28
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	019a      	lsls	r2, r3, #6
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	041b      	lsls	r3, r3, #16
 80054e6:	431a      	orrs	r2, r3
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	061b      	lsls	r3, r3, #24
 80054ec:	431a      	orrs	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	071b      	lsls	r3, r3, #28
 80054f2:	4929      	ldr	r1, [pc, #164]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d028      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005506:	4b24      	ldr	r3, [pc, #144]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550c:	0e1b      	lsrs	r3, r3, #24
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005514:	4b20      	ldr	r3, [pc, #128]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551a:	0c1b      	lsrs	r3, r3, #16
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	019a      	lsls	r2, r3, #6
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	041b      	lsls	r3, r3, #16
 800552c:	431a      	orrs	r2, r3
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	061b      	lsls	r3, r3, #24
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	071b      	lsls	r3, r3, #28
 800553a:	4917      	ldr	r1, [pc, #92]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005542:	4b15      	ldr	r3, [pc, #84]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005548:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	4911      	ldr	r1, [pc, #68]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005558:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a0e      	ldr	r2, [pc, #56]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800555e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005564:	f7fd fef8 	bl	8003358 <HAL_GetTick>
 8005568:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800556a:	e008      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800556c:	f7fd fef4 	bl	8003358 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b64      	cmp	r3, #100	; 0x64
 8005578:	d901      	bls.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e007      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800558a:	d1ef      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	40023800 	.word	0x40023800

0800559c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e049      	b.n	8005642 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fd fc32 	bl	8002e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3304      	adds	r3, #4
 80055d8:	4619      	mov	r1, r3
 80055da:	4610      	mov	r0, r2
 80055dc:	f000 fa74 	bl	8005ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e049      	b.n	80056f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d106      	bne.n	8005676 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f841 	bl	80056f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2202      	movs	r2, #2
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3304      	adds	r3, #4
 8005686:	4619      	mov	r1, r3
 8005688:	4610      	mov	r0, r2
 800568a:	f000 fa1d 	bl	8005ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005722:	2b01      	cmp	r3, #1
 8005724:	d101      	bne.n	800572a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005726:	2302      	movs	r3, #2
 8005728:	e0ff      	b.n	800592a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b14      	cmp	r3, #20
 8005736:	f200 80f0 	bhi.w	800591a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800573a:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005795 	.word	0x08005795
 8005744:	0800591b 	.word	0x0800591b
 8005748:	0800591b 	.word	0x0800591b
 800574c:	0800591b 	.word	0x0800591b
 8005750:	080057d5 	.word	0x080057d5
 8005754:	0800591b 	.word	0x0800591b
 8005758:	0800591b 	.word	0x0800591b
 800575c:	0800591b 	.word	0x0800591b
 8005760:	08005817 	.word	0x08005817
 8005764:	0800591b 	.word	0x0800591b
 8005768:	0800591b 	.word	0x0800591b
 800576c:	0800591b 	.word	0x0800591b
 8005770:	08005857 	.word	0x08005857
 8005774:	0800591b 	.word	0x0800591b
 8005778:	0800591b 	.word	0x0800591b
 800577c:	0800591b 	.word	0x0800591b
 8005780:	08005899 	.word	0x08005899
 8005784:	0800591b 	.word	0x0800591b
 8005788:	0800591b 	.word	0x0800591b
 800578c:	0800591b 	.word	0x0800591b
 8005790:	080058d9 	.word	0x080058d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fa34 	bl	8005c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0208 	orr.w	r2, r2, #8
 80057ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699a      	ldr	r2, [r3, #24]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0204 	bic.w	r2, r2, #4
 80057be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6999      	ldr	r1, [r3, #24]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	691a      	ldr	r2, [r3, #16]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	619a      	str	r2, [r3, #24]
      break;
 80057d2:	e0a5      	b.n	8005920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fa86 	bl	8005cec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6999      	ldr	r1, [r3, #24]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	021a      	lsls	r2, r3, #8
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	619a      	str	r2, [r3, #24]
      break;
 8005814:	e084      	b.n	8005920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fadd 	bl	8005ddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0208 	orr.w	r2, r2, #8
 8005830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0204 	bic.w	r2, r2, #4
 8005840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69d9      	ldr	r1, [r3, #28]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	61da      	str	r2, [r3, #28]
      break;
 8005854:	e064      	b.n	8005920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fb33 	bl	8005ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69da      	ldr	r2, [r3, #28]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69d9      	ldr	r1, [r3, #28]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	021a      	lsls	r2, r3, #8
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	61da      	str	r2, [r3, #28]
      break;
 8005896:	e043      	b.n	8005920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fb6a 	bl	8005f78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0208 	orr.w	r2, r2, #8
 80058b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0204 	bic.w	r2, r2, #4
 80058c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058d6:	e023      	b.n	8005920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fb9c 	bl	800601c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005902:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	021a      	lsls	r2, r3, #8
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005918:	e002      	b.n	8005920 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	75fb      	strb	r3, [r7, #23]
      break;
 800591e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005928:	7dfb      	ldrb	r3, [r7, #23]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop

08005934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_TIM_ConfigClockSource+0x1c>
 800594c:	2302      	movs	r3, #2
 800594e:	e0b4      	b.n	8005aba <HAL_TIM_ConfigClockSource+0x186>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	4b56      	ldr	r3, [pc, #344]	; (8005ac4 <HAL_TIM_ConfigClockSource+0x190>)
 800596c:	4013      	ands	r3, r2
 800596e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005976:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005988:	d03e      	beq.n	8005a08 <HAL_TIM_ConfigClockSource+0xd4>
 800598a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598e:	f200 8087 	bhi.w	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005996:	f000 8086 	beq.w	8005aa6 <HAL_TIM_ConfigClockSource+0x172>
 800599a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599e:	d87f      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059a0:	2b70      	cmp	r3, #112	; 0x70
 80059a2:	d01a      	beq.n	80059da <HAL_TIM_ConfigClockSource+0xa6>
 80059a4:	2b70      	cmp	r3, #112	; 0x70
 80059a6:	d87b      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059a8:	2b60      	cmp	r3, #96	; 0x60
 80059aa:	d050      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0x11a>
 80059ac:	2b60      	cmp	r3, #96	; 0x60
 80059ae:	d877      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059b0:	2b50      	cmp	r3, #80	; 0x50
 80059b2:	d03c      	beq.n	8005a2e <HAL_TIM_ConfigClockSource+0xfa>
 80059b4:	2b50      	cmp	r3, #80	; 0x50
 80059b6:	d873      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d058      	beq.n	8005a6e <HAL_TIM_ConfigClockSource+0x13a>
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	d86f      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059c0:	2b30      	cmp	r3, #48	; 0x30
 80059c2:	d064      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x15a>
 80059c4:	2b30      	cmp	r3, #48	; 0x30
 80059c6:	d86b      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d060      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x15a>
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	d867      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d05c      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x15a>
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	d05a      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x15a>
 80059d8:	e062      	b.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6899      	ldr	r1, [r3, #8]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f000 fbe5 	bl	80061b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	609a      	str	r2, [r3, #8]
      break;
 8005a06:	e04f      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	6899      	ldr	r1, [r3, #8]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f000 fbce 	bl	80061b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a2a:	609a      	str	r2, [r3, #8]
      break;
 8005a2c:	e03c      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6859      	ldr	r1, [r3, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f000 fb42 	bl	80060c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2150      	movs	r1, #80	; 0x50
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fb9b 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005a4c:	e02c      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6818      	ldr	r0, [r3, #0]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6859      	ldr	r1, [r3, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f000 fb61 	bl	8006122 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2160      	movs	r1, #96	; 0x60
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fb8b 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005a6c:	e01c      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	6859      	ldr	r1, [r3, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f000 fb22 	bl	80060c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2140      	movs	r1, #64	; 0x40
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fb7b 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005a8c:	e00c      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f000 fb72 	bl	8006182 <TIM_ITRx_SetConfig>
      break;
 8005a9e:	e003      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa4:	e000      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005aa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	fffeff88 	.word	0xfffeff88

08005ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a40      	ldr	r2, [pc, #256]	; (8005bdc <TIM_Base_SetConfig+0x114>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d013      	beq.n	8005b08 <TIM_Base_SetConfig+0x40>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae6:	d00f      	beq.n	8005b08 <TIM_Base_SetConfig+0x40>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a3d      	ldr	r2, [pc, #244]	; (8005be0 <TIM_Base_SetConfig+0x118>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d00b      	beq.n	8005b08 <TIM_Base_SetConfig+0x40>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a3c      	ldr	r2, [pc, #240]	; (8005be4 <TIM_Base_SetConfig+0x11c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d007      	beq.n	8005b08 <TIM_Base_SetConfig+0x40>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a3b      	ldr	r2, [pc, #236]	; (8005be8 <TIM_Base_SetConfig+0x120>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d003      	beq.n	8005b08 <TIM_Base_SetConfig+0x40>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a3a      	ldr	r2, [pc, #232]	; (8005bec <TIM_Base_SetConfig+0x124>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d108      	bne.n	8005b1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2f      	ldr	r2, [pc, #188]	; (8005bdc <TIM_Base_SetConfig+0x114>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d02b      	beq.n	8005b7a <TIM_Base_SetConfig+0xb2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b28:	d027      	beq.n	8005b7a <TIM_Base_SetConfig+0xb2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a2c      	ldr	r2, [pc, #176]	; (8005be0 <TIM_Base_SetConfig+0x118>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d023      	beq.n	8005b7a <TIM_Base_SetConfig+0xb2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a2b      	ldr	r2, [pc, #172]	; (8005be4 <TIM_Base_SetConfig+0x11c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d01f      	beq.n	8005b7a <TIM_Base_SetConfig+0xb2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a2a      	ldr	r2, [pc, #168]	; (8005be8 <TIM_Base_SetConfig+0x120>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d01b      	beq.n	8005b7a <TIM_Base_SetConfig+0xb2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a29      	ldr	r2, [pc, #164]	; (8005bec <TIM_Base_SetConfig+0x124>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d017      	beq.n	8005b7a <TIM_Base_SetConfig+0xb2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a28      	ldr	r2, [pc, #160]	; (8005bf0 <TIM_Base_SetConfig+0x128>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <TIM_Base_SetConfig+0xb2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a27      	ldr	r2, [pc, #156]	; (8005bf4 <TIM_Base_SetConfig+0x12c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00f      	beq.n	8005b7a <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a26      	ldr	r2, [pc, #152]	; (8005bf8 <TIM_Base_SetConfig+0x130>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00b      	beq.n	8005b7a <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a25      	ldr	r2, [pc, #148]	; (8005bfc <TIM_Base_SetConfig+0x134>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d007      	beq.n	8005b7a <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a24      	ldr	r2, [pc, #144]	; (8005c00 <TIM_Base_SetConfig+0x138>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a23      	ldr	r2, [pc, #140]	; (8005c04 <TIM_Base_SetConfig+0x13c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d108      	bne.n	8005b8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a0a      	ldr	r2, [pc, #40]	; (8005bdc <TIM_Base_SetConfig+0x114>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d003      	beq.n	8005bc0 <TIM_Base_SetConfig+0xf8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a0c      	ldr	r2, [pc, #48]	; (8005bec <TIM_Base_SetConfig+0x124>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d103      	bne.n	8005bc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	691a      	ldr	r2, [r3, #16]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	615a      	str	r2, [r3, #20]
}
 8005bce:	bf00      	nop
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40010000 	.word	0x40010000
 8005be0:	40000400 	.word	0x40000400
 8005be4:	40000800 	.word	0x40000800
 8005be8:	40000c00 	.word	0x40000c00
 8005bec:	40010400 	.word	0x40010400
 8005bf0:	40014000 	.word	0x40014000
 8005bf4:	40014400 	.word	0x40014400
 8005bf8:	40014800 	.word	0x40014800
 8005bfc:	40001800 	.word	0x40001800
 8005c00:	40001c00 	.word	0x40001c00
 8005c04:	40002000 	.word	0x40002000

08005c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f023 0201 	bic.w	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4b2b      	ldr	r3, [pc, #172]	; (8005ce0 <TIM_OC1_SetConfig+0xd8>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0303 	bic.w	r3, r3, #3
 8005c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f023 0302 	bic.w	r3, r3, #2
 8005c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a21      	ldr	r2, [pc, #132]	; (8005ce4 <TIM_OC1_SetConfig+0xdc>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_OC1_SetConfig+0x64>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a20      	ldr	r2, [pc, #128]	; (8005ce8 <TIM_OC1_SetConfig+0xe0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d10c      	bne.n	8005c86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f023 0308 	bic.w	r3, r3, #8
 8005c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f023 0304 	bic.w	r3, r3, #4
 8005c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a16      	ldr	r2, [pc, #88]	; (8005ce4 <TIM_OC1_SetConfig+0xdc>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d003      	beq.n	8005c96 <TIM_OC1_SetConfig+0x8e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a15      	ldr	r2, [pc, #84]	; (8005ce8 <TIM_OC1_SetConfig+0xe0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d111      	bne.n	8005cba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	621a      	str	r2, [r3, #32]
}
 8005cd4:	bf00      	nop
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	fffeff8f 	.word	0xfffeff8f
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40010400 	.word	0x40010400

08005cec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f023 0210 	bic.w	r2, r3, #16
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4b2e      	ldr	r3, [pc, #184]	; (8005dd0 <TIM_OC2_SetConfig+0xe4>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	021b      	lsls	r3, r3, #8
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f023 0320 	bic.w	r3, r3, #32
 8005d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a23      	ldr	r2, [pc, #140]	; (8005dd4 <TIM_OC2_SetConfig+0xe8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_OC2_SetConfig+0x68>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a22      	ldr	r2, [pc, #136]	; (8005dd8 <TIM_OC2_SetConfig+0xec>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d10d      	bne.n	8005d70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	011b      	lsls	r3, r3, #4
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a18      	ldr	r2, [pc, #96]	; (8005dd4 <TIM_OC2_SetConfig+0xe8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d003      	beq.n	8005d80 <TIM_OC2_SetConfig+0x94>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a17      	ldr	r2, [pc, #92]	; (8005dd8 <TIM_OC2_SetConfig+0xec>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d113      	bne.n	8005da8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	621a      	str	r2, [r3, #32]
}
 8005dc2:	bf00      	nop
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	feff8fff 	.word	0xfeff8fff
 8005dd4:	40010000 	.word	0x40010000
 8005dd8:	40010400 	.word	0x40010400

08005ddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4b2d      	ldr	r3, [pc, #180]	; (8005ebc <TIM_OC3_SetConfig+0xe0>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a22      	ldr	r2, [pc, #136]	; (8005ec0 <TIM_OC3_SetConfig+0xe4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d003      	beq.n	8005e42 <TIM_OC3_SetConfig+0x66>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a21      	ldr	r2, [pc, #132]	; (8005ec4 <TIM_OC3_SetConfig+0xe8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d10d      	bne.n	8005e5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a17      	ldr	r2, [pc, #92]	; (8005ec0 <TIM_OC3_SetConfig+0xe4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_OC3_SetConfig+0x92>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a16      	ldr	r2, [pc, #88]	; (8005ec4 <TIM_OC3_SetConfig+0xe8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d113      	bne.n	8005e96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	621a      	str	r2, [r3, #32]
}
 8005eb0:	bf00      	nop
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	fffeff8f 	.word	0xfffeff8f
 8005ec0:	40010000 	.word	0x40010000
 8005ec4:	40010400 	.word	0x40010400

08005ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4b1e      	ldr	r3, [pc, #120]	; (8005f6c <TIM_OC4_SetConfig+0xa4>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	021b      	lsls	r3, r3, #8
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	031b      	lsls	r3, r3, #12
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a13      	ldr	r2, [pc, #76]	; (8005f70 <TIM_OC4_SetConfig+0xa8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_OC4_SetConfig+0x68>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a12      	ldr	r2, [pc, #72]	; (8005f74 <TIM_OC4_SetConfig+0xac>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d109      	bne.n	8005f44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	019b      	lsls	r3, r3, #6
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	621a      	str	r2, [r3, #32]
}
 8005f5e:	bf00      	nop
 8005f60:	371c      	adds	r7, #28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	feff8fff 	.word	0xfeff8fff
 8005f70:	40010000 	.word	0x40010000
 8005f74:	40010400 	.word	0x40010400

08005f78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4b1b      	ldr	r3, [pc, #108]	; (8006010 <TIM_OC5_SetConfig+0x98>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	041b      	lsls	r3, r3, #16
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a12      	ldr	r2, [pc, #72]	; (8006014 <TIM_OC5_SetConfig+0x9c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_OC5_SetConfig+0x5e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a11      	ldr	r2, [pc, #68]	; (8006018 <TIM_OC5_SetConfig+0xa0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d109      	bne.n	8005fea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	621a      	str	r2, [r3, #32]
}
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	fffeff8f 	.word	0xfffeff8f
 8006014:	40010000 	.word	0x40010000
 8006018:	40010400 	.word	0x40010400

0800601c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4b1c      	ldr	r3, [pc, #112]	; (80060b8 <TIM_OC6_SetConfig+0x9c>)
 8006048:	4013      	ands	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800605e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	051b      	lsls	r3, r3, #20
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a13      	ldr	r2, [pc, #76]	; (80060bc <TIM_OC6_SetConfig+0xa0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_OC6_SetConfig+0x60>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a12      	ldr	r2, [pc, #72]	; (80060c0 <TIM_OC6_SetConfig+0xa4>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d109      	bne.n	8006090 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006082:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	029b      	lsls	r3, r3, #10
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	621a      	str	r2, [r3, #32]
}
 80060aa:	bf00      	nop
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	feff8fff 	.word	0xfeff8fff
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40010400 	.word	0x40010400

080060c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	f023 0201 	bic.w	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f023 030a 	bic.w	r3, r3, #10
 8006100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	621a      	str	r2, [r3, #32]
}
 8006116:	bf00      	nop
 8006118:	371c      	adds	r7, #28
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006122:	b480      	push	{r7}
 8006124:	b087      	sub	sp, #28
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f023 0210 	bic.w	r2, r3, #16
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800614c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	031b      	lsls	r3, r3, #12
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800615e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006182:	b480      	push	{r7}
 8006184:	b085      	sub	sp, #20
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	f043 0307 	orr.w	r3, r3, #7
 80061a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	609a      	str	r2, [r3, #8]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	021a      	lsls	r2, r3, #8
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	431a      	orrs	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4313      	orrs	r3, r2
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	609a      	str	r2, [r3, #8]
}
 80061ec:	bf00      	nop
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800620c:	2302      	movs	r3, #2
 800620e:	e06d      	b.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a30      	ldr	r2, [pc, #192]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a2f      	ldr	r2, [pc, #188]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d108      	bne.n	8006256 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800624a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4313      	orrs	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a20      	ldr	r2, [pc, #128]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d022      	beq.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006282:	d01d      	beq.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1d      	ldr	r2, [pc, #116]	; (8006300 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d018      	beq.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1c      	ldr	r2, [pc, #112]	; (8006304 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d013      	beq.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a1a      	ldr	r2, [pc, #104]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d00e      	beq.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a15      	ldr	r2, [pc, #84]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d009      	beq.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a16      	ldr	r2, [pc, #88]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d004      	beq.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a15      	ldr	r2, [pc, #84]	; (8006310 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d10c      	bne.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	40010000 	.word	0x40010000
 80062fc:	40010400 	.word	0x40010400
 8006300:	40000400 	.word	0x40000400
 8006304:	40000800 	.word	0x40000800
 8006308:	40000c00 	.word	0x40000c00
 800630c:	40014000 	.word	0x40014000
 8006310:	40001800 	.word	0x40001800

08006314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e040      	b.n	80063a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fc fdea 	bl	8002f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2224      	movs	r2, #36	; 0x24
 8006340:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0201 	bic.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fc08 	bl	8006b68 <UART_SetConfig>
 8006358:	4603      	mov	r3, r0
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e022      	b.n	80063a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fe60 	bl	8007030 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800637e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689a      	ldr	r2, [r3, #8]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800638e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0201 	orr.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fee7 	bl	8007174 <UART_CheckIdleState>
 80063a6:	4603      	mov	r3, r0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b08a      	sub	sp, #40	; 0x28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	4613      	mov	r3, r2
 80063bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	d165      	bne.n	8006492 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <HAL_UART_Transmit_DMA+0x22>
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e05e      	b.n	8006494 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	88fa      	ldrh	r2, [r7, #6]
 80063e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	88fa      	ldrh	r2, [r7, #6]
 80063e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2221      	movs	r2, #33	; 0x21
 80063f8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d027      	beq.n	8006452 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	4a25      	ldr	r2, [pc, #148]	; (800649c <HAL_UART_Transmit_DMA+0xec>)
 8006408:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640e:	4a24      	ldr	r2, [pc, #144]	; (80064a0 <HAL_UART_Transmit_DMA+0xf0>)
 8006410:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006416:	4a23      	ldr	r2, [pc, #140]	; (80064a4 <HAL_UART_Transmit_DMA+0xf4>)
 8006418:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641e:	2200      	movs	r2, #0
 8006420:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800642a:	4619      	mov	r1, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3328      	adds	r3, #40	; 0x28
 8006432:	461a      	mov	r2, r3
 8006434:	88fb      	ldrh	r3, [r7, #6]
 8006436:	f7fd f95b 	bl	80036f0 <HAL_DMA_Start_IT>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2210      	movs	r2, #16
 8006444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e020      	b.n	8006494 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2240      	movs	r2, #64	; 0x40
 8006458:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3308      	adds	r3, #8
 8006460:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	613b      	str	r3, [r7, #16]
   return(result);
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3308      	adds	r3, #8
 8006478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800647a:	623a      	str	r2, [r7, #32]
 800647c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	69f9      	ldr	r1, [r7, #28]
 8006480:	6a3a      	ldr	r2, [r7, #32]
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	61bb      	str	r3, [r7, #24]
   return(result);
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e5      	bne.n	800645a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	e000      	b.n	8006494 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8006492:	2302      	movs	r3, #2
  }
}
 8006494:	4618      	mov	r0, r3
 8006496:	3728      	adds	r7, #40	; 0x28
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	080075f1 	.word	0x080075f1
 80064a0:	08007687 	.word	0x08007687
 80064a4:	08007809 	.word	0x08007809

080064a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08a      	sub	sp, #40	; 0x28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	4613      	mov	r3, r2
 80064b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d132      	bne.n	8006526 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_UART_Receive_DMA+0x24>
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e02b      	b.n	8006528 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d018      	beq.n	8006516 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	613b      	str	r3, [r7, #16]
   return(result);
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	623b      	str	r3, [r7, #32]
 8006504:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	69f9      	ldr	r1, [r7, #28]
 8006508:	6a3a      	ldr	r2, [r7, #32]
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e6      	bne.n	80064e4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006516:	88fb      	ldrh	r3, [r7, #6]
 8006518:	461a      	mov	r2, r3
 800651a:	68b9      	ldr	r1, [r7, #8]
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 ff3d 	bl	800739c <UART_Start_Receive_DMA>
 8006522:	4603      	mov	r3, r0
 8006524:	e000      	b.n	8006528 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006526:	2302      	movs	r3, #2
  }
}
 8006528:	4618      	mov	r0, r3
 800652a:	3728      	adds	r7, #40	; 0x28
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b0ba      	sub	sp, #232	; 0xe8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006556:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800655a:	f640 030f 	movw	r3, #2063	; 0x80f
 800655e:	4013      	ands	r3, r2
 8006560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006568:	2b00      	cmp	r3, #0
 800656a:	d115      	bne.n	8006598 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800656c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006570:	f003 0320 	and.w	r3, r3, #32
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00f      	beq.n	8006598 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d009      	beq.n	8006598 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 82ac 	beq.w	8006ae6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
      }
      return;
 8006596:	e2a6      	b.n	8006ae6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8117 	beq.w	80067d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065b2:	4b85      	ldr	r3, [pc, #532]	; (80067c8 <HAL_UART_IRQHandler+0x298>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 810a 	beq.w	80067d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d011      	beq.n	80065ec <HAL_UART_IRQHandler+0xbc>
 80065c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00b      	beq.n	80065ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2201      	movs	r2, #1
 80065da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e2:	f043 0201 	orr.w	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d011      	beq.n	800661c <HAL_UART_IRQHandler+0xec>
 80065f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00b      	beq.n	800661c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2202      	movs	r2, #2
 800660a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006612:	f043 0204 	orr.w	r2, r3, #4
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800661c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d011      	beq.n	800664c <HAL_UART_IRQHandler+0x11c>
 8006628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2204      	movs	r2, #4
 800663a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006642:	f043 0202 	orr.w	r2, r3, #2
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800664c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b00      	cmp	r3, #0
 8006656:	d017      	beq.n	8006688 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800665c:	f003 0320 	and.w	r3, r3, #32
 8006660:	2b00      	cmp	r3, #0
 8006662:	d105      	bne.n	8006670 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006668:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2208      	movs	r2, #8
 8006676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800667e:	f043 0208 	orr.w	r2, r3, #8
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006690:	2b00      	cmp	r3, #0
 8006692:	d012      	beq.n	80066ba <HAL_UART_IRQHandler+0x18a>
 8006694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00c      	beq.n	80066ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b0:	f043 0220 	orr.w	r2, r3, #32
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8212 	beq.w	8006aea <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00d      	beq.n	80066ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006702:	2b40      	cmp	r3, #64	; 0x40
 8006704:	d005      	beq.n	8006712 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800670a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800670e:	2b00      	cmp	r3, #0
 8006710:	d04f      	beq.n	80067b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 ff08 	bl	8007528 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006722:	2b40      	cmp	r3, #64	; 0x40
 8006724:	d141      	bne.n	80067aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3308      	adds	r3, #8
 800672c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800673c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3308      	adds	r3, #8
 800674e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006752:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800675e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800676a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1d9      	bne.n	8006726 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006776:	2b00      	cmp	r3, #0
 8006778:	d013      	beq.n	80067a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800677e:	4a13      	ldr	r2, [pc, #76]	; (80067cc <HAL_UART_IRQHandler+0x29c>)
 8006780:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006786:	4618      	mov	r0, r3
 8006788:	f7fd f882 	bl	8003890 <HAL_DMA_Abort_IT>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d017      	beq.n	80067c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800679c:	4610      	mov	r0, r2
 800679e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a0:	e00f      	b.n	80067c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f9c0 	bl	8006b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a8:	e00b      	b.n	80067c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f9bc 	bl	8006b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b0:	e007      	b.n	80067c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f9b8 	bl	8006b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80067c0:	e193      	b.n	8006aea <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c2:	bf00      	nop
    return;
 80067c4:	e191      	b.n	8006aea <HAL_UART_IRQHandler+0x5ba>
 80067c6:	bf00      	nop
 80067c8:	04000120 	.word	0x04000120
 80067cc:	08007887 	.word	0x08007887

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	f040 814c 	bne.w	8006a72 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067de:	f003 0310 	and.w	r3, r3, #16
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 8145 	beq.w	8006a72 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 813e 	beq.w	8006a72 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2210      	movs	r2, #16
 80067fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006808:	2b40      	cmp	r3, #64	; 0x40
 800680a:	f040 80b6 	bne.w	800697a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800681a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 8165 	beq.w	8006aee <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800682a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800682e:	429a      	cmp	r2, r3
 8006830:	f080 815d 	bcs.w	8006aee <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800683a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006848:	f000 8086 	beq.w	8006958 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006860:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006868:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	461a      	mov	r2, r3
 8006872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006876:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800687a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006882:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800688e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1da      	bne.n	800684c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068a8:	f023 0301 	bic.w	r3, r3, #1
 80068ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3308      	adds	r3, #8
 80068b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e1      	bne.n	8006896 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3308      	adds	r3, #8
 80068d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3308      	adds	r3, #8
 80068f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e3      	bne.n	80068d2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006928:	f023 0310 	bic.w	r3, r3, #16
 800692c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800693a:	65bb      	str	r3, [r7, #88]	; 0x58
 800693c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006940:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e4      	bne.n	8006918 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006952:	4618      	mov	r0, r3
 8006954:	f7fc ff2c 	bl	80037b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800696a:	b29b      	uxth	r3, r3
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	b29b      	uxth	r3, r3
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f8e2 	bl	8006b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006978:	e0b9      	b.n	8006aee <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006986:	b29b      	uxth	r3, r3
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 80ab 	beq.w	8006af2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800699c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 80a6 	beq.w	8006af2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069c8:	647b      	str	r3, [r7, #68]	; 0x44
 80069ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e4      	bne.n	80069a6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3308      	adds	r3, #8
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	623b      	str	r3, [r7, #32]
   return(result);
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	f023 0301 	bic.w	r3, r3, #1
 80069f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a00:	633a      	str	r2, [r7, #48]	; 0x30
 8006a02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e3      	bne.n	80069dc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f023 0310 	bic.w	r3, r3, #16
 8006a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a4a:	61fb      	str	r3, [r7, #28]
 8006a4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	69b9      	ldr	r1, [r7, #24]
 8006a50:	69fa      	ldr	r2, [r7, #28]
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	617b      	str	r3, [r7, #20]
   return(result);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e4      	bne.n	8006a28 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2202      	movs	r2, #2
 8006a62:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f866 	bl	8006b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a70:	e03f      	b.n	8006af2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00e      	beq.n	8006a9c <HAL_UART_IRQHandler+0x56c>
 8006a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d008      	beq.n	8006a9c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f85d 	bl	8006b54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a9a:	e02d      	b.n	8006af8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00e      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d008      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d01c      	beq.n	8006af6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
    }
    return;
 8006ac4:	e017      	b.n	8006af6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d012      	beq.n	8006af8 <HAL_UART_IRQHandler+0x5c8>
 8006ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00c      	beq.n	8006af8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fee7 	bl	80078b2 <UART_EndTransmit_IT>
    return;
 8006ae4:	e008      	b.n	8006af8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006ae6:	bf00      	nop
 8006ae8:	e006      	b.n	8006af8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006aea:	bf00      	nop
 8006aec:	e004      	b.n	8006af8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006aee:	bf00      	nop
 8006af0:	e002      	b.n	8006af8 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006af2:	bf00      	nop
 8006af4:	e000      	b.n	8006af8 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006af6:	bf00      	nop
  }

}
 8006af8:	37e8      	adds	r7, #232	; 0xe8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop

08006b00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	431a      	orrs	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	4ba6      	ldr	r3, [pc, #664]	; (8006e2c <UART_SetConfig+0x2c4>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6812      	ldr	r2, [r2, #0]
 8006b9a:	6979      	ldr	r1, [r7, #20]
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a94      	ldr	r2, [pc, #592]	; (8006e30 <UART_SetConfig+0x2c8>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d120      	bne.n	8006c26 <UART_SetConfig+0xbe>
 8006be4:	4b93      	ldr	r3, [pc, #588]	; (8006e34 <UART_SetConfig+0x2cc>)
 8006be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bea:	f003 0303 	and.w	r3, r3, #3
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d816      	bhi.n	8006c20 <UART_SetConfig+0xb8>
 8006bf2:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <UART_SetConfig+0x90>)
 8006bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf8:	08006c09 	.word	0x08006c09
 8006bfc:	08006c15 	.word	0x08006c15
 8006c00:	08006c0f 	.word	0x08006c0f
 8006c04:	08006c1b 	.word	0x08006c1b
 8006c08:	2301      	movs	r3, #1
 8006c0a:	77fb      	strb	r3, [r7, #31]
 8006c0c:	e150      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	77fb      	strb	r3, [r7, #31]
 8006c12:	e14d      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006c14:	2304      	movs	r3, #4
 8006c16:	77fb      	strb	r3, [r7, #31]
 8006c18:	e14a      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006c1a:	2308      	movs	r3, #8
 8006c1c:	77fb      	strb	r3, [r7, #31]
 8006c1e:	e147      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006c20:	2310      	movs	r3, #16
 8006c22:	77fb      	strb	r3, [r7, #31]
 8006c24:	e144      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a83      	ldr	r2, [pc, #524]	; (8006e38 <UART_SetConfig+0x2d0>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d132      	bne.n	8006c96 <UART_SetConfig+0x12e>
 8006c30:	4b80      	ldr	r3, [pc, #512]	; (8006e34 <UART_SetConfig+0x2cc>)
 8006c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c36:	f003 030c 	and.w	r3, r3, #12
 8006c3a:	2b0c      	cmp	r3, #12
 8006c3c:	d828      	bhi.n	8006c90 <UART_SetConfig+0x128>
 8006c3e:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <UART_SetConfig+0xdc>)
 8006c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c44:	08006c79 	.word	0x08006c79
 8006c48:	08006c91 	.word	0x08006c91
 8006c4c:	08006c91 	.word	0x08006c91
 8006c50:	08006c91 	.word	0x08006c91
 8006c54:	08006c85 	.word	0x08006c85
 8006c58:	08006c91 	.word	0x08006c91
 8006c5c:	08006c91 	.word	0x08006c91
 8006c60:	08006c91 	.word	0x08006c91
 8006c64:	08006c7f 	.word	0x08006c7f
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	08006c91 	.word	0x08006c91
 8006c70:	08006c91 	.word	0x08006c91
 8006c74:	08006c8b 	.word	0x08006c8b
 8006c78:	2300      	movs	r3, #0
 8006c7a:	77fb      	strb	r3, [r7, #31]
 8006c7c:	e118      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	77fb      	strb	r3, [r7, #31]
 8006c82:	e115      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006c84:	2304      	movs	r3, #4
 8006c86:	77fb      	strb	r3, [r7, #31]
 8006c88:	e112      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006c8a:	2308      	movs	r3, #8
 8006c8c:	77fb      	strb	r3, [r7, #31]
 8006c8e:	e10f      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006c90:	2310      	movs	r3, #16
 8006c92:	77fb      	strb	r3, [r7, #31]
 8006c94:	e10c      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a68      	ldr	r2, [pc, #416]	; (8006e3c <UART_SetConfig+0x2d4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d120      	bne.n	8006ce2 <UART_SetConfig+0x17a>
 8006ca0:	4b64      	ldr	r3, [pc, #400]	; (8006e34 <UART_SetConfig+0x2cc>)
 8006ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006caa:	2b30      	cmp	r3, #48	; 0x30
 8006cac:	d013      	beq.n	8006cd6 <UART_SetConfig+0x16e>
 8006cae:	2b30      	cmp	r3, #48	; 0x30
 8006cb0:	d814      	bhi.n	8006cdc <UART_SetConfig+0x174>
 8006cb2:	2b20      	cmp	r3, #32
 8006cb4:	d009      	beq.n	8006cca <UART_SetConfig+0x162>
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	d810      	bhi.n	8006cdc <UART_SetConfig+0x174>
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <UART_SetConfig+0x15c>
 8006cbe:	2b10      	cmp	r3, #16
 8006cc0:	d006      	beq.n	8006cd0 <UART_SetConfig+0x168>
 8006cc2:	e00b      	b.n	8006cdc <UART_SetConfig+0x174>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	77fb      	strb	r3, [r7, #31]
 8006cc8:	e0f2      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	77fb      	strb	r3, [r7, #31]
 8006cce:	e0ef      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006cd0:	2304      	movs	r3, #4
 8006cd2:	77fb      	strb	r3, [r7, #31]
 8006cd4:	e0ec      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006cd6:	2308      	movs	r3, #8
 8006cd8:	77fb      	strb	r3, [r7, #31]
 8006cda:	e0e9      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006cdc:	2310      	movs	r3, #16
 8006cde:	77fb      	strb	r3, [r7, #31]
 8006ce0:	e0e6      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a56      	ldr	r2, [pc, #344]	; (8006e40 <UART_SetConfig+0x2d8>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d120      	bne.n	8006d2e <UART_SetConfig+0x1c6>
 8006cec:	4b51      	ldr	r3, [pc, #324]	; (8006e34 <UART_SetConfig+0x2cc>)
 8006cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8006cf8:	d013      	beq.n	8006d22 <UART_SetConfig+0x1ba>
 8006cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8006cfc:	d814      	bhi.n	8006d28 <UART_SetConfig+0x1c0>
 8006cfe:	2b80      	cmp	r3, #128	; 0x80
 8006d00:	d009      	beq.n	8006d16 <UART_SetConfig+0x1ae>
 8006d02:	2b80      	cmp	r3, #128	; 0x80
 8006d04:	d810      	bhi.n	8006d28 <UART_SetConfig+0x1c0>
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <UART_SetConfig+0x1a8>
 8006d0a:	2b40      	cmp	r3, #64	; 0x40
 8006d0c:	d006      	beq.n	8006d1c <UART_SetConfig+0x1b4>
 8006d0e:	e00b      	b.n	8006d28 <UART_SetConfig+0x1c0>
 8006d10:	2300      	movs	r3, #0
 8006d12:	77fb      	strb	r3, [r7, #31]
 8006d14:	e0cc      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006d16:	2302      	movs	r3, #2
 8006d18:	77fb      	strb	r3, [r7, #31]
 8006d1a:	e0c9      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006d1c:	2304      	movs	r3, #4
 8006d1e:	77fb      	strb	r3, [r7, #31]
 8006d20:	e0c6      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006d22:	2308      	movs	r3, #8
 8006d24:	77fb      	strb	r3, [r7, #31]
 8006d26:	e0c3      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006d28:	2310      	movs	r3, #16
 8006d2a:	77fb      	strb	r3, [r7, #31]
 8006d2c:	e0c0      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a44      	ldr	r2, [pc, #272]	; (8006e44 <UART_SetConfig+0x2dc>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d125      	bne.n	8006d84 <UART_SetConfig+0x21c>
 8006d38:	4b3e      	ldr	r3, [pc, #248]	; (8006e34 <UART_SetConfig+0x2cc>)
 8006d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d46:	d017      	beq.n	8006d78 <UART_SetConfig+0x210>
 8006d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d4c:	d817      	bhi.n	8006d7e <UART_SetConfig+0x216>
 8006d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d52:	d00b      	beq.n	8006d6c <UART_SetConfig+0x204>
 8006d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d58:	d811      	bhi.n	8006d7e <UART_SetConfig+0x216>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <UART_SetConfig+0x1fe>
 8006d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d62:	d006      	beq.n	8006d72 <UART_SetConfig+0x20a>
 8006d64:	e00b      	b.n	8006d7e <UART_SetConfig+0x216>
 8006d66:	2300      	movs	r3, #0
 8006d68:	77fb      	strb	r3, [r7, #31]
 8006d6a:	e0a1      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	77fb      	strb	r3, [r7, #31]
 8006d70:	e09e      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006d72:	2304      	movs	r3, #4
 8006d74:	77fb      	strb	r3, [r7, #31]
 8006d76:	e09b      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006d78:	2308      	movs	r3, #8
 8006d7a:	77fb      	strb	r3, [r7, #31]
 8006d7c:	e098      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006d7e:	2310      	movs	r3, #16
 8006d80:	77fb      	strb	r3, [r7, #31]
 8006d82:	e095      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a2f      	ldr	r2, [pc, #188]	; (8006e48 <UART_SetConfig+0x2e0>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d125      	bne.n	8006dda <UART_SetConfig+0x272>
 8006d8e:	4b29      	ldr	r3, [pc, #164]	; (8006e34 <UART_SetConfig+0x2cc>)
 8006d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d9c:	d017      	beq.n	8006dce <UART_SetConfig+0x266>
 8006d9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006da2:	d817      	bhi.n	8006dd4 <UART_SetConfig+0x26c>
 8006da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006da8:	d00b      	beq.n	8006dc2 <UART_SetConfig+0x25a>
 8006daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dae:	d811      	bhi.n	8006dd4 <UART_SetConfig+0x26c>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <UART_SetConfig+0x254>
 8006db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006db8:	d006      	beq.n	8006dc8 <UART_SetConfig+0x260>
 8006dba:	e00b      	b.n	8006dd4 <UART_SetConfig+0x26c>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	77fb      	strb	r3, [r7, #31]
 8006dc0:	e076      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	77fb      	strb	r3, [r7, #31]
 8006dc6:	e073      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006dc8:	2304      	movs	r3, #4
 8006dca:	77fb      	strb	r3, [r7, #31]
 8006dcc:	e070      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006dce:	2308      	movs	r3, #8
 8006dd0:	77fb      	strb	r3, [r7, #31]
 8006dd2:	e06d      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006dd4:	2310      	movs	r3, #16
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e06a      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a1b      	ldr	r2, [pc, #108]	; (8006e4c <UART_SetConfig+0x2e4>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d138      	bne.n	8006e56 <UART_SetConfig+0x2ee>
 8006de4:	4b13      	ldr	r3, [pc, #76]	; (8006e34 <UART_SetConfig+0x2cc>)
 8006de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006dee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006df2:	d017      	beq.n	8006e24 <UART_SetConfig+0x2bc>
 8006df4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006df8:	d82a      	bhi.n	8006e50 <UART_SetConfig+0x2e8>
 8006dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dfe:	d00b      	beq.n	8006e18 <UART_SetConfig+0x2b0>
 8006e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e04:	d824      	bhi.n	8006e50 <UART_SetConfig+0x2e8>
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <UART_SetConfig+0x2aa>
 8006e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e0e:	d006      	beq.n	8006e1e <UART_SetConfig+0x2b6>
 8006e10:	e01e      	b.n	8006e50 <UART_SetConfig+0x2e8>
 8006e12:	2300      	movs	r3, #0
 8006e14:	77fb      	strb	r3, [r7, #31]
 8006e16:	e04b      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	77fb      	strb	r3, [r7, #31]
 8006e1c:	e048      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006e1e:	2304      	movs	r3, #4
 8006e20:	77fb      	strb	r3, [r7, #31]
 8006e22:	e045      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006e24:	2308      	movs	r3, #8
 8006e26:	77fb      	strb	r3, [r7, #31]
 8006e28:	e042      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006e2a:	bf00      	nop
 8006e2c:	efff69f3 	.word	0xefff69f3
 8006e30:	40011000 	.word	0x40011000
 8006e34:	40023800 	.word	0x40023800
 8006e38:	40004400 	.word	0x40004400
 8006e3c:	40004800 	.word	0x40004800
 8006e40:	40004c00 	.word	0x40004c00
 8006e44:	40005000 	.word	0x40005000
 8006e48:	40011400 	.word	0x40011400
 8006e4c:	40007800 	.word	0x40007800
 8006e50:	2310      	movs	r3, #16
 8006e52:	77fb      	strb	r3, [r7, #31]
 8006e54:	e02c      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a72      	ldr	r2, [pc, #456]	; (8007024 <UART_SetConfig+0x4bc>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d125      	bne.n	8006eac <UART_SetConfig+0x344>
 8006e60:	4b71      	ldr	r3, [pc, #452]	; (8007028 <UART_SetConfig+0x4c0>)
 8006e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e6e:	d017      	beq.n	8006ea0 <UART_SetConfig+0x338>
 8006e70:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e74:	d817      	bhi.n	8006ea6 <UART_SetConfig+0x33e>
 8006e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e7a:	d00b      	beq.n	8006e94 <UART_SetConfig+0x32c>
 8006e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e80:	d811      	bhi.n	8006ea6 <UART_SetConfig+0x33e>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <UART_SetConfig+0x326>
 8006e86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e8a:	d006      	beq.n	8006e9a <UART_SetConfig+0x332>
 8006e8c:	e00b      	b.n	8006ea6 <UART_SetConfig+0x33e>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	77fb      	strb	r3, [r7, #31]
 8006e92:	e00d      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006e94:	2302      	movs	r3, #2
 8006e96:	77fb      	strb	r3, [r7, #31]
 8006e98:	e00a      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006e9a:	2304      	movs	r3, #4
 8006e9c:	77fb      	strb	r3, [r7, #31]
 8006e9e:	e007      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006ea0:	2308      	movs	r3, #8
 8006ea2:	77fb      	strb	r3, [r7, #31]
 8006ea4:	e004      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006ea6:	2310      	movs	r3, #16
 8006ea8:	77fb      	strb	r3, [r7, #31]
 8006eaa:	e001      	b.n	8006eb0 <UART_SetConfig+0x348>
 8006eac:	2310      	movs	r3, #16
 8006eae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb8:	d15b      	bne.n	8006f72 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006eba:	7ffb      	ldrb	r3, [r7, #31]
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d828      	bhi.n	8006f12 <UART_SetConfig+0x3aa>
 8006ec0:	a201      	add	r2, pc, #4	; (adr r2, 8006ec8 <UART_SetConfig+0x360>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006ef5 	.word	0x08006ef5
 8006ed0:	08006efd 	.word	0x08006efd
 8006ed4:	08006f13 	.word	0x08006f13
 8006ed8:	08006f03 	.word	0x08006f03
 8006edc:	08006f13 	.word	0x08006f13
 8006ee0:	08006f13 	.word	0x08006f13
 8006ee4:	08006f13 	.word	0x08006f13
 8006ee8:	08006f0b 	.word	0x08006f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eec:	f7fd ff06 	bl	8004cfc <HAL_RCC_GetPCLK1Freq>
 8006ef0:	61b8      	str	r0, [r7, #24]
        break;
 8006ef2:	e013      	b.n	8006f1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ef4:	f7fd ff16 	bl	8004d24 <HAL_RCC_GetPCLK2Freq>
 8006ef8:	61b8      	str	r0, [r7, #24]
        break;
 8006efa:	e00f      	b.n	8006f1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006efc:	4b4b      	ldr	r3, [pc, #300]	; (800702c <UART_SetConfig+0x4c4>)
 8006efe:	61bb      	str	r3, [r7, #24]
        break;
 8006f00:	e00c      	b.n	8006f1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f02:	f7fd fe29 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8006f06:	61b8      	str	r0, [r7, #24]
        break;
 8006f08:	e008      	b.n	8006f1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f0e:	61bb      	str	r3, [r7, #24]
        break;
 8006f10:	e004      	b.n	8006f1c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	77bb      	strb	r3, [r7, #30]
        break;
 8006f1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d074      	beq.n	800700c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	005a      	lsls	r2, r3, #1
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	085b      	lsrs	r3, r3, #1
 8006f2c:	441a      	add	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2b0f      	cmp	r3, #15
 8006f3c:	d916      	bls.n	8006f6c <UART_SetConfig+0x404>
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f44:	d212      	bcs.n	8006f6c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f023 030f 	bic.w	r3, r3, #15
 8006f4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	89fb      	ldrh	r3, [r7, #14]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	89fa      	ldrh	r2, [r7, #14]
 8006f68:	60da      	str	r2, [r3, #12]
 8006f6a:	e04f      	b.n	800700c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	77bb      	strb	r3, [r7, #30]
 8006f70:	e04c      	b.n	800700c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f72:	7ffb      	ldrb	r3, [r7, #31]
 8006f74:	2b08      	cmp	r3, #8
 8006f76:	d828      	bhi.n	8006fca <UART_SetConfig+0x462>
 8006f78:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <UART_SetConfig+0x418>)
 8006f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7e:	bf00      	nop
 8006f80:	08006fa5 	.word	0x08006fa5
 8006f84:	08006fad 	.word	0x08006fad
 8006f88:	08006fb5 	.word	0x08006fb5
 8006f8c:	08006fcb 	.word	0x08006fcb
 8006f90:	08006fbb 	.word	0x08006fbb
 8006f94:	08006fcb 	.word	0x08006fcb
 8006f98:	08006fcb 	.word	0x08006fcb
 8006f9c:	08006fcb 	.word	0x08006fcb
 8006fa0:	08006fc3 	.word	0x08006fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fa4:	f7fd feaa 	bl	8004cfc <HAL_RCC_GetPCLK1Freq>
 8006fa8:	61b8      	str	r0, [r7, #24]
        break;
 8006faa:	e013      	b.n	8006fd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fac:	f7fd feba 	bl	8004d24 <HAL_RCC_GetPCLK2Freq>
 8006fb0:	61b8      	str	r0, [r7, #24]
        break;
 8006fb2:	e00f      	b.n	8006fd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb4:	4b1d      	ldr	r3, [pc, #116]	; (800702c <UART_SetConfig+0x4c4>)
 8006fb6:	61bb      	str	r3, [r7, #24]
        break;
 8006fb8:	e00c      	b.n	8006fd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fba:	f7fd fdcd 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8006fbe:	61b8      	str	r0, [r7, #24]
        break;
 8006fc0:	e008      	b.n	8006fd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc6:	61bb      	str	r3, [r7, #24]
        break;
 8006fc8:	e004      	b.n	8006fd4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	77bb      	strb	r3, [r7, #30]
        break;
 8006fd2:	bf00      	nop
    }

    if (pclk != 0U)
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d018      	beq.n	800700c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	085a      	lsrs	r2, r3, #1
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	441a      	add	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	2b0f      	cmp	r3, #15
 8006ff2:	d909      	bls.n	8007008 <UART_SetConfig+0x4a0>
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ffa:	d205      	bcs.n	8007008 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60da      	str	r2, [r3, #12]
 8007006:	e001      	b.n	800700c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007018:	7fbb      	ldrb	r3, [r7, #30]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3720      	adds	r7, #32
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40007c00 	.word	0x40007c00
 8007028:	40023800 	.word	0x40023800
 800702c:	00f42400 	.word	0x00f42400

08007030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00a      	beq.n	800705a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00a      	beq.n	800709e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	f003 0308 	and.w	r3, r3, #8
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	f003 0310 	and.w	r3, r3, #16
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	f003 0320 	and.w	r3, r3, #32
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710c:	2b00      	cmp	r3, #0
 800710e:	d01a      	beq.n	8007146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800712e:	d10a      	bne.n	8007146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	605a      	str	r2, [r3, #4]
  }
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af02      	add	r7, sp, #8
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007184:	f7fc f8e8 	bl	8003358 <HAL_GetTick>
 8007188:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0308 	and.w	r3, r3, #8
 8007194:	2b08      	cmp	r3, #8
 8007196:	d10e      	bne.n	80071b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f831 	bl	800720e <UART_WaitOnFlagUntilTimeout>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e027      	b.n	8007206 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b04      	cmp	r3, #4
 80071c2:	d10e      	bne.n	80071e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f81b 	bl	800720e <UART_WaitOnFlagUntilTimeout>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d001      	beq.n	80071e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e011      	b.n	8007206 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b09c      	sub	sp, #112	; 0x70
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	603b      	str	r3, [r7, #0]
 800721a:	4613      	mov	r3, r2
 800721c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800721e:	e0a7      	b.n	8007370 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007226:	f000 80a3 	beq.w	8007370 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800722a:	f7fc f895 	bl	8003358 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007236:	429a      	cmp	r2, r3
 8007238:	d302      	bcc.n	8007240 <UART_WaitOnFlagUntilTimeout+0x32>
 800723a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800723c:	2b00      	cmp	r3, #0
 800723e:	d13f      	bne.n	80072c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800724e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007250:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007254:	667b      	str	r3, [r7, #100]	; 0x64
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800725e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007260:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007262:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007264:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007266:	e841 2300 	strex	r3, r2, [r1]
 800726a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800726c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1e6      	bne.n	8007240 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3308      	adds	r3, #8
 8007278:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	f023 0301 	bic.w	r3, r3, #1
 8007288:	663b      	str	r3, [r7, #96]	; 0x60
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3308      	adds	r3, #8
 8007290:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007292:	64ba      	str	r2, [r7, #72]	; 0x48
 8007294:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007296:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e5      	bne.n	8007272 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e068      	b.n	8007392 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0304 	and.w	r3, r3, #4
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d050      	beq.n	8007370 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072dc:	d148      	bne.n	8007370 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007306:	637b      	str	r3, [r7, #52]	; 0x34
 8007308:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800730c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e6      	bne.n	80072e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3308      	adds	r3, #8
 8007320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	613b      	str	r3, [r7, #16]
   return(result);
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	f023 0301 	bic.w	r3, r3, #1
 8007330:	66bb      	str	r3, [r7, #104]	; 0x68
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3308      	adds	r3, #8
 8007338:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800733a:	623a      	str	r2, [r7, #32]
 800733c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	69f9      	ldr	r1, [r7, #28]
 8007340:	6a3a      	ldr	r2, [r7, #32]
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	61bb      	str	r3, [r7, #24]
   return(result);
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e5      	bne.n	800731a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2220      	movs	r2, #32
 8007352:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2220      	movs	r2, #32
 8007358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2220      	movs	r2, #32
 8007360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e010      	b.n	8007392 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	69da      	ldr	r2, [r3, #28]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	4013      	ands	r3, r2
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	429a      	cmp	r2, r3
 800737e:	bf0c      	ite	eq
 8007380:	2301      	moveq	r3, #1
 8007382:	2300      	movne	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	461a      	mov	r2, r3
 8007388:	79fb      	ldrb	r3, [r7, #7]
 800738a:	429a      	cmp	r2, r3
 800738c:	f43f af48 	beq.w	8007220 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3770      	adds	r7, #112	; 0x70
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b096      	sub	sp, #88	; 0x58
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	4613      	mov	r3, r2
 80073a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	88fa      	ldrh	r2, [r7, #6]
 80073b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2222      	movs	r2, #34	; 0x22
 80073c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d028      	beq.n	8007422 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d4:	4a3e      	ldr	r2, [pc, #248]	; (80074d0 <UART_Start_Receive_DMA+0x134>)
 80073d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073dc:	4a3d      	ldr	r2, [pc, #244]	; (80074d4 <UART_Start_Receive_DMA+0x138>)
 80073de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e4:	4a3c      	ldr	r2, [pc, #240]	; (80074d8 <UART_Start_Receive_DMA+0x13c>)
 80073e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ec:	2200      	movs	r2, #0
 80073ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3324      	adds	r3, #36	; 0x24
 80073fa:	4619      	mov	r1, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007400:	461a      	mov	r2, r3
 8007402:	88fb      	ldrh	r3, [r7, #6]
 8007404:	f7fc f974 	bl	80036f0 <HAL_DMA_Start_IT>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d009      	beq.n	8007422 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2210      	movs	r2, #16
 8007412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2220      	movs	r2, #32
 800741a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e051      	b.n	80074c6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d018      	beq.n	800745c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800743e:	657b      	str	r3, [r7, #84]	; 0x54
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	461a      	mov	r2, r3
 8007446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007448:	64bb      	str	r3, [r7, #72]	; 0x48
 800744a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800744e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e6      	bne.n	800742a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3308      	adds	r3, #8
 8007462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	f043 0301 	orr.w	r3, r3, #1
 8007472:	653b      	str	r3, [r7, #80]	; 0x50
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3308      	adds	r3, #8
 800747a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800747c:	637a      	str	r2, [r7, #52]	; 0x34
 800747e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007484:	e841 2300 	strex	r3, r2, [r1]
 8007488:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1e5      	bne.n	800745c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3308      	adds	r3, #8
 8007496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	613b      	str	r3, [r7, #16]
   return(result);
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3308      	adds	r3, #8
 80074ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074b0:	623a      	str	r2, [r7, #32]
 80074b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	69f9      	ldr	r1, [r7, #28]
 80074b6:	6a3a      	ldr	r2, [r7, #32]
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e5      	bne.n	8007490 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3758      	adds	r7, #88	; 0x58
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	080076a3 	.word	0x080076a3
 80074d4:	080077cb 	.word	0x080077cb
 80074d8:	08007809 	.word	0x08007809

080074dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074dc:	b480      	push	{r7}
 80074de:	b089      	sub	sp, #36	; 0x24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80074f8:	61fb      	str	r3, [r7, #28]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	61bb      	str	r3, [r7, #24]
 8007504:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6979      	ldr	r1, [r7, #20]
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	613b      	str	r3, [r7, #16]
   return(result);
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e6      	bne.n	80074e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800751c:	bf00      	nop
 800751e:	3724      	adds	r7, #36	; 0x24
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007528:	b480      	push	{r7}
 800752a:	b095      	sub	sp, #84	; 0x54
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007544:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	461a      	mov	r2, r3
 800754c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800754e:	643b      	str	r3, [r7, #64]	; 0x40
 8007550:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800755c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e6      	bne.n	8007530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3308      	adds	r3, #8
 8007568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	e853 3f00 	ldrex	r3, [r3]
 8007570:	61fb      	str	r3, [r7, #28]
   return(result);
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	f023 0301 	bic.w	r3, r3, #1
 8007578:	64bb      	str	r3, [r7, #72]	; 0x48
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3308      	adds	r3, #8
 8007580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007582:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007584:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800758a:	e841 2300 	strex	r3, r2, [r1]
 800758e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1e5      	bne.n	8007562 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800759a:	2b01      	cmp	r3, #1
 800759c:	d118      	bne.n	80075d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	e853 3f00 	ldrex	r3, [r3]
 80075aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f023 0310 	bic.w	r3, r3, #16
 80075b2:	647b      	str	r3, [r7, #68]	; 0x44
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	6979      	ldr	r1, [r7, #20]
 80075c2:	69ba      	ldr	r2, [r7, #24]
 80075c4:	e841 2300 	strex	r3, r2, [r1]
 80075c8:	613b      	str	r3, [r7, #16]
   return(result);
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e6      	bne.n	800759e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2220      	movs	r2, #32
 80075d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80075e4:	bf00      	nop
 80075e6:	3754      	adds	r7, #84	; 0x54
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b090      	sub	sp, #64	; 0x40
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007606:	d037      	beq.n	8007678 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8007608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800760a:	2200      	movs	r2, #0
 800760c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3308      	adds	r3, #8
 8007616:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	623b      	str	r3, [r7, #32]
   return(result);
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007626:	63bb      	str	r3, [r7, #56]	; 0x38
 8007628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3308      	adds	r3, #8
 800762e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007630:	633a      	str	r2, [r7, #48]	; 0x30
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e5      	bne.n	8007610 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	e853 3f00 	ldrex	r3, [r3]
 8007650:	60fb      	str	r3, [r7, #12]
   return(result);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007658:	637b      	str	r3, [r7, #52]	; 0x34
 800765a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007662:	61fb      	str	r3, [r7, #28]
 8007664:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007666:	69b9      	ldr	r1, [r7, #24]
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	e841 2300 	strex	r3, r2, [r1]
 800766e:	617b      	str	r3, [r7, #20]
   return(result);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1e6      	bne.n	8007644 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007676:	e002      	b.n	800767e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8007678:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800767a:	f7fa fce1 	bl	8002040 <HAL_UART_TxCpltCallback>
}
 800767e:	bf00      	nop
 8007680:	3740      	adds	r7, #64	; 0x40
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007692:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f7ff fa33 	bl	8006b00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800769a:	bf00      	nop
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b09c      	sub	sp, #112	; 0x70
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b8:	d071      	beq.n	800779e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80076ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076bc:	2200      	movs	r2, #0
 80076be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ca:	e853 3f00 	ldrex	r3, [r3]
 80076ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80076d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	461a      	mov	r2, r3
 80076de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80076e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e6      	bne.n	80076c2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3308      	adds	r3, #8
 80076fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fe:	e853 3f00 	ldrex	r3, [r3]
 8007702:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007706:	f023 0301 	bic.w	r3, r3, #1
 800770a:	667b      	str	r3, [r7, #100]	; 0x64
 800770c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3308      	adds	r3, #8
 8007712:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007714:	647a      	str	r2, [r7, #68]	; 0x44
 8007716:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800771a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800771c:	e841 2300 	strex	r3, r2, [r1]
 8007720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e5      	bne.n	80076f4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3308      	adds	r3, #8
 800772e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	e853 3f00 	ldrex	r3, [r3]
 8007736:	623b      	str	r3, [r7, #32]
   return(result);
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800773e:	663b      	str	r3, [r7, #96]	; 0x60
 8007740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3308      	adds	r3, #8
 8007746:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007748:	633a      	str	r2, [r7, #48]	; 0x30
 800774a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800774e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007750:	e841 2300 	strex	r3, r2, [r1]
 8007754:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1e5      	bne.n	8007728 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800775c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800775e:	2220      	movs	r2, #32
 8007760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007768:	2b01      	cmp	r3, #1
 800776a:	d118      	bne.n	800779e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800776c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	60fb      	str	r3, [r7, #12]
   return(result);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f023 0310 	bic.w	r3, r3, #16
 8007780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	69b9      	ldr	r1, [r7, #24]
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	617b      	str	r3, [r7, #20]
   return(result);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e6      	bne.n	800776c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800779e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a0:	2200      	movs	r2, #0
 80077a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d107      	bne.n	80077bc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077b2:	4619      	mov	r1, r3
 80077b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80077b6:	f7ff f9c1 	bl	8006b3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077ba:	e002      	b.n	80077c2 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80077bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80077be:	f7fa fc51 	bl	8002064 <HAL_UART_RxCpltCallback>
}
 80077c2:	bf00      	nop
 80077c4:	3770      	adds	r7, #112	; 0x70
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d109      	bne.n	80077fa <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077ec:	085b      	lsrs	r3, r3, #1
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	4619      	mov	r1, r3
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f7ff f9a2 	bl	8006b3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077f8:	e002      	b.n	8007800 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f7ff f98a 	bl	8006b14 <HAL_UART_RxHalfCpltCallback>
}
 8007800:	bf00      	nop
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800781a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007822:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782e:	2b80      	cmp	r3, #128	; 0x80
 8007830:	d109      	bne.n	8007846 <UART_DMAError+0x3e>
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	2b21      	cmp	r3, #33	; 0x21
 8007836:	d106      	bne.n	8007846 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	2200      	movs	r2, #0
 800783c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007840:	6978      	ldr	r0, [r7, #20]
 8007842:	f7ff fe4b 	bl	80074dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007850:	2b40      	cmp	r3, #64	; 0x40
 8007852:	d109      	bne.n	8007868 <UART_DMAError+0x60>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b22      	cmp	r3, #34	; 0x22
 8007858:	d106      	bne.n	8007868 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2200      	movs	r2, #0
 800785e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007862:	6978      	ldr	r0, [r7, #20]
 8007864:	f7ff fe60 	bl	8007528 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800786e:	f043 0210 	orr.w	r2, r3, #16
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007878:	6978      	ldr	r0, [r7, #20]
 800787a:	f7ff f955 	bl	8006b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800787e:	bf00      	nop
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f7ff f93f 	bl	8006b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078aa:	bf00      	nop
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b088      	sub	sp, #32
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	e853 3f00 	ldrex	r3, [r3]
 80078c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ce:	61fb      	str	r3, [r7, #28]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6979      	ldr	r1, [r7, #20]
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	613b      	str	r3, [r7, #16]
   return(result);
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e6      	bne.n	80078ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2220      	movs	r2, #32
 80078f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7fa fba1 	bl	8002040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078fe:	bf00      	nop
 8007900:	3720      	adds	r7, #32
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <__cxa_pure_virtual>:
 8007906:	b508      	push	{r3, lr}
 8007908:	f000 f80c 	bl	8007924 <_ZSt9terminatev>

0800790c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800790c:	b508      	push	{r3, lr}
 800790e:	4780      	blx	r0
 8007910:	f000 f80d 	bl	800792e <abort>

08007914 <_ZSt13get_terminatev>:
 8007914:	4b02      	ldr	r3, [pc, #8]	; (8007920 <_ZSt13get_terminatev+0xc>)
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	f3bf 8f5b 	dmb	ish
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	2000000c 	.word	0x2000000c

08007924 <_ZSt9terminatev>:
 8007924:	b508      	push	{r3, lr}
 8007926:	f7ff fff5 	bl	8007914 <_ZSt13get_terminatev>
 800792a:	f7ff ffef 	bl	800790c <_ZN10__cxxabiv111__terminateEPFvvE>

0800792e <abort>:
 800792e:	b508      	push	{r3, lr}
 8007930:	2006      	movs	r0, #6
 8007932:	f000 f873 	bl	8007a1c <raise>
 8007936:	2001      	movs	r0, #1
 8007938:	f7fb fc16 	bl	8003168 <_exit>

0800793c <__errno>:
 800793c:	4b01      	ldr	r3, [pc, #4]	; (8007944 <__errno+0x8>)
 800793e:	6818      	ldr	r0, [r3, #0]
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	20000010 	.word	0x20000010

08007948 <__libc_init_array>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	4d0d      	ldr	r5, [pc, #52]	; (8007980 <__libc_init_array+0x38>)
 800794c:	4c0d      	ldr	r4, [pc, #52]	; (8007984 <__libc_init_array+0x3c>)
 800794e:	1b64      	subs	r4, r4, r5
 8007950:	10a4      	asrs	r4, r4, #2
 8007952:	2600      	movs	r6, #0
 8007954:	42a6      	cmp	r6, r4
 8007956:	d109      	bne.n	800796c <__libc_init_array+0x24>
 8007958:	4d0b      	ldr	r5, [pc, #44]	; (8007988 <__libc_init_array+0x40>)
 800795a:	4c0c      	ldr	r4, [pc, #48]	; (800798c <__libc_init_array+0x44>)
 800795c:	f000 f9b0 	bl	8007cc0 <_init>
 8007960:	1b64      	subs	r4, r4, r5
 8007962:	10a4      	asrs	r4, r4, #2
 8007964:	2600      	movs	r6, #0
 8007966:	42a6      	cmp	r6, r4
 8007968:	d105      	bne.n	8007976 <__libc_init_array+0x2e>
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007970:	4798      	blx	r3
 8007972:	3601      	adds	r6, #1
 8007974:	e7ee      	b.n	8007954 <__libc_init_array+0xc>
 8007976:	f855 3b04 	ldr.w	r3, [r5], #4
 800797a:	4798      	blx	r3
 800797c:	3601      	adds	r6, #1
 800797e:	e7f2      	b.n	8007966 <__libc_init_array+0x1e>
 8007980:	0800804c 	.word	0x0800804c
 8007984:	0800804c 	.word	0x0800804c
 8007988:	0800804c 	.word	0x0800804c
 800798c:	08008054 	.word	0x08008054

08007990 <memcpy>:
 8007990:	440a      	add	r2, r1
 8007992:	4291      	cmp	r1, r2
 8007994:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007998:	d100      	bne.n	800799c <memcpy+0xc>
 800799a:	4770      	bx	lr
 800799c:	b510      	push	{r4, lr}
 800799e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079a6:	4291      	cmp	r1, r2
 80079a8:	d1f9      	bne.n	800799e <memcpy+0xe>
 80079aa:	bd10      	pop	{r4, pc}

080079ac <memset>:
 80079ac:	4402      	add	r2, r0
 80079ae:	4603      	mov	r3, r0
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d100      	bne.n	80079b6 <memset+0xa>
 80079b4:	4770      	bx	lr
 80079b6:	f803 1b01 	strb.w	r1, [r3], #1
 80079ba:	e7f9      	b.n	80079b0 <memset+0x4>

080079bc <realloc>:
 80079bc:	4b02      	ldr	r3, [pc, #8]	; (80079c8 <realloc+0xc>)
 80079be:	460a      	mov	r2, r1
 80079c0:	4601      	mov	r1, r0
 80079c2:	6818      	ldr	r0, [r3, #0]
 80079c4:	f000 b8da 	b.w	8007b7c <_realloc_r>
 80079c8:	20000010 	.word	0x20000010

080079cc <_raise_r>:
 80079cc:	291f      	cmp	r1, #31
 80079ce:	b538      	push	{r3, r4, r5, lr}
 80079d0:	4604      	mov	r4, r0
 80079d2:	460d      	mov	r5, r1
 80079d4:	d904      	bls.n	80079e0 <_raise_r+0x14>
 80079d6:	2316      	movs	r3, #22
 80079d8:	6003      	str	r3, [r0, #0]
 80079da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079e2:	b112      	cbz	r2, 80079ea <_raise_r+0x1e>
 80079e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079e8:	b94b      	cbnz	r3, 80079fe <_raise_r+0x32>
 80079ea:	4620      	mov	r0, r4
 80079ec:	f000 f830 	bl	8007a50 <_getpid_r>
 80079f0:	462a      	mov	r2, r5
 80079f2:	4601      	mov	r1, r0
 80079f4:	4620      	mov	r0, r4
 80079f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079fa:	f000 b817 	b.w	8007a2c <_kill_r>
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d00a      	beq.n	8007a18 <_raise_r+0x4c>
 8007a02:	1c59      	adds	r1, r3, #1
 8007a04:	d103      	bne.n	8007a0e <_raise_r+0x42>
 8007a06:	2316      	movs	r3, #22
 8007a08:	6003      	str	r3, [r0, #0]
 8007a0a:	2001      	movs	r0, #1
 8007a0c:	e7e7      	b.n	80079de <_raise_r+0x12>
 8007a0e:	2400      	movs	r4, #0
 8007a10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a14:	4628      	mov	r0, r5
 8007a16:	4798      	blx	r3
 8007a18:	2000      	movs	r0, #0
 8007a1a:	e7e0      	b.n	80079de <_raise_r+0x12>

08007a1c <raise>:
 8007a1c:	4b02      	ldr	r3, [pc, #8]	; (8007a28 <raise+0xc>)
 8007a1e:	4601      	mov	r1, r0
 8007a20:	6818      	ldr	r0, [r3, #0]
 8007a22:	f7ff bfd3 	b.w	80079cc <_raise_r>
 8007a26:	bf00      	nop
 8007a28:	20000010 	.word	0x20000010

08007a2c <_kill_r>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	4d07      	ldr	r5, [pc, #28]	; (8007a4c <_kill_r+0x20>)
 8007a30:	2300      	movs	r3, #0
 8007a32:	4604      	mov	r4, r0
 8007a34:	4608      	mov	r0, r1
 8007a36:	4611      	mov	r1, r2
 8007a38:	602b      	str	r3, [r5, #0]
 8007a3a:	f7fb fb85 	bl	8003148 <_kill>
 8007a3e:	1c43      	adds	r3, r0, #1
 8007a40:	d102      	bne.n	8007a48 <_kill_r+0x1c>
 8007a42:	682b      	ldr	r3, [r5, #0]
 8007a44:	b103      	cbz	r3, 8007a48 <_kill_r+0x1c>
 8007a46:	6023      	str	r3, [r4, #0]
 8007a48:	bd38      	pop	{r3, r4, r5, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20000ca4 	.word	0x20000ca4

08007a50 <_getpid_r>:
 8007a50:	f7fb bb72 	b.w	8003138 <_getpid>

08007a54 <sbrk_aligned>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	4e0e      	ldr	r6, [pc, #56]	; (8007a90 <sbrk_aligned+0x3c>)
 8007a58:	460c      	mov	r4, r1
 8007a5a:	6831      	ldr	r1, [r6, #0]
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	b911      	cbnz	r1, 8007a66 <sbrk_aligned+0x12>
 8007a60:	f000 f8bc 	bl	8007bdc <_sbrk_r>
 8007a64:	6030      	str	r0, [r6, #0]
 8007a66:	4621      	mov	r1, r4
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 f8b7 	bl	8007bdc <_sbrk_r>
 8007a6e:	1c43      	adds	r3, r0, #1
 8007a70:	d00a      	beq.n	8007a88 <sbrk_aligned+0x34>
 8007a72:	1cc4      	adds	r4, r0, #3
 8007a74:	f024 0403 	bic.w	r4, r4, #3
 8007a78:	42a0      	cmp	r0, r4
 8007a7a:	d007      	beq.n	8007a8c <sbrk_aligned+0x38>
 8007a7c:	1a21      	subs	r1, r4, r0
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f000 f8ac 	bl	8007bdc <_sbrk_r>
 8007a84:	3001      	adds	r0, #1
 8007a86:	d101      	bne.n	8007a8c <sbrk_aligned+0x38>
 8007a88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	bd70      	pop	{r4, r5, r6, pc}
 8007a90:	20000ca0 	.word	0x20000ca0

08007a94 <_malloc_r>:
 8007a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a98:	1ccd      	adds	r5, r1, #3
 8007a9a:	f025 0503 	bic.w	r5, r5, #3
 8007a9e:	3508      	adds	r5, #8
 8007aa0:	2d0c      	cmp	r5, #12
 8007aa2:	bf38      	it	cc
 8007aa4:	250c      	movcc	r5, #12
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	db01      	blt.n	8007ab0 <_malloc_r+0x1c>
 8007aac:	42a9      	cmp	r1, r5
 8007aae:	d905      	bls.n	8007abc <_malloc_r+0x28>
 8007ab0:	230c      	movs	r3, #12
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	2600      	movs	r6, #0
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007abc:	4e2e      	ldr	r6, [pc, #184]	; (8007b78 <_malloc_r+0xe4>)
 8007abe:	f000 f89d 	bl	8007bfc <__malloc_lock>
 8007ac2:	6833      	ldr	r3, [r6, #0]
 8007ac4:	461c      	mov	r4, r3
 8007ac6:	bb34      	cbnz	r4, 8007b16 <_malloc_r+0x82>
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4638      	mov	r0, r7
 8007acc:	f7ff ffc2 	bl	8007a54 <sbrk_aligned>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	d14d      	bne.n	8007b72 <_malloc_r+0xde>
 8007ad6:	6834      	ldr	r4, [r6, #0]
 8007ad8:	4626      	mov	r6, r4
 8007ada:	2e00      	cmp	r6, #0
 8007adc:	d140      	bne.n	8007b60 <_malloc_r+0xcc>
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	eb04 0803 	add.w	r8, r4, r3
 8007ae8:	f000 f878 	bl	8007bdc <_sbrk_r>
 8007aec:	4580      	cmp	r8, r0
 8007aee:	d13a      	bne.n	8007b66 <_malloc_r+0xd2>
 8007af0:	6821      	ldr	r1, [r4, #0]
 8007af2:	3503      	adds	r5, #3
 8007af4:	1a6d      	subs	r5, r5, r1
 8007af6:	f025 0503 	bic.w	r5, r5, #3
 8007afa:	3508      	adds	r5, #8
 8007afc:	2d0c      	cmp	r5, #12
 8007afe:	bf38      	it	cc
 8007b00:	250c      	movcc	r5, #12
 8007b02:	4629      	mov	r1, r5
 8007b04:	4638      	mov	r0, r7
 8007b06:	f7ff ffa5 	bl	8007a54 <sbrk_aligned>
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	d02b      	beq.n	8007b66 <_malloc_r+0xd2>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	442b      	add	r3, r5
 8007b12:	6023      	str	r3, [r4, #0]
 8007b14:	e00e      	b.n	8007b34 <_malloc_r+0xa0>
 8007b16:	6822      	ldr	r2, [r4, #0]
 8007b18:	1b52      	subs	r2, r2, r5
 8007b1a:	d41e      	bmi.n	8007b5a <_malloc_r+0xc6>
 8007b1c:	2a0b      	cmp	r2, #11
 8007b1e:	d916      	bls.n	8007b4e <_malloc_r+0xba>
 8007b20:	1961      	adds	r1, r4, r5
 8007b22:	42a3      	cmp	r3, r4
 8007b24:	6025      	str	r5, [r4, #0]
 8007b26:	bf18      	it	ne
 8007b28:	6059      	strne	r1, [r3, #4]
 8007b2a:	6863      	ldr	r3, [r4, #4]
 8007b2c:	bf08      	it	eq
 8007b2e:	6031      	streq	r1, [r6, #0]
 8007b30:	5162      	str	r2, [r4, r5]
 8007b32:	604b      	str	r3, [r1, #4]
 8007b34:	4638      	mov	r0, r7
 8007b36:	f104 060b 	add.w	r6, r4, #11
 8007b3a:	f000 f865 	bl	8007c08 <__malloc_unlock>
 8007b3e:	f026 0607 	bic.w	r6, r6, #7
 8007b42:	1d23      	adds	r3, r4, #4
 8007b44:	1af2      	subs	r2, r6, r3
 8007b46:	d0b6      	beq.n	8007ab6 <_malloc_r+0x22>
 8007b48:	1b9b      	subs	r3, r3, r6
 8007b4a:	50a3      	str	r3, [r4, r2]
 8007b4c:	e7b3      	b.n	8007ab6 <_malloc_r+0x22>
 8007b4e:	6862      	ldr	r2, [r4, #4]
 8007b50:	42a3      	cmp	r3, r4
 8007b52:	bf0c      	ite	eq
 8007b54:	6032      	streq	r2, [r6, #0]
 8007b56:	605a      	strne	r2, [r3, #4]
 8007b58:	e7ec      	b.n	8007b34 <_malloc_r+0xa0>
 8007b5a:	4623      	mov	r3, r4
 8007b5c:	6864      	ldr	r4, [r4, #4]
 8007b5e:	e7b2      	b.n	8007ac6 <_malloc_r+0x32>
 8007b60:	4634      	mov	r4, r6
 8007b62:	6876      	ldr	r6, [r6, #4]
 8007b64:	e7b9      	b.n	8007ada <_malloc_r+0x46>
 8007b66:	230c      	movs	r3, #12
 8007b68:	603b      	str	r3, [r7, #0]
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	f000 f84c 	bl	8007c08 <__malloc_unlock>
 8007b70:	e7a1      	b.n	8007ab6 <_malloc_r+0x22>
 8007b72:	6025      	str	r5, [r4, #0]
 8007b74:	e7de      	b.n	8007b34 <_malloc_r+0xa0>
 8007b76:	bf00      	nop
 8007b78:	20000c9c 	.word	0x20000c9c

08007b7c <_realloc_r>:
 8007b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b80:	4680      	mov	r8, r0
 8007b82:	4614      	mov	r4, r2
 8007b84:	460e      	mov	r6, r1
 8007b86:	b921      	cbnz	r1, 8007b92 <_realloc_r+0x16>
 8007b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	f7ff bf81 	b.w	8007a94 <_malloc_r>
 8007b92:	b92a      	cbnz	r2, 8007ba0 <_realloc_r+0x24>
 8007b94:	f000 f83e 	bl	8007c14 <_free_r>
 8007b98:	4625      	mov	r5, r4
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ba0:	f000 f884 	bl	8007cac <_malloc_usable_size_r>
 8007ba4:	4284      	cmp	r4, r0
 8007ba6:	4607      	mov	r7, r0
 8007ba8:	d802      	bhi.n	8007bb0 <_realloc_r+0x34>
 8007baa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007bae:	d812      	bhi.n	8007bd6 <_realloc_r+0x5a>
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	4640      	mov	r0, r8
 8007bb4:	f7ff ff6e 	bl	8007a94 <_malloc_r>
 8007bb8:	4605      	mov	r5, r0
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d0ed      	beq.n	8007b9a <_realloc_r+0x1e>
 8007bbe:	42bc      	cmp	r4, r7
 8007bc0:	4622      	mov	r2, r4
 8007bc2:	4631      	mov	r1, r6
 8007bc4:	bf28      	it	cs
 8007bc6:	463a      	movcs	r2, r7
 8007bc8:	f7ff fee2 	bl	8007990 <memcpy>
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4640      	mov	r0, r8
 8007bd0:	f000 f820 	bl	8007c14 <_free_r>
 8007bd4:	e7e1      	b.n	8007b9a <_realloc_r+0x1e>
 8007bd6:	4635      	mov	r5, r6
 8007bd8:	e7df      	b.n	8007b9a <_realloc_r+0x1e>
	...

08007bdc <_sbrk_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	4d06      	ldr	r5, [pc, #24]	; (8007bf8 <_sbrk_r+0x1c>)
 8007be0:	2300      	movs	r3, #0
 8007be2:	4604      	mov	r4, r0
 8007be4:	4608      	mov	r0, r1
 8007be6:	602b      	str	r3, [r5, #0]
 8007be8:	f7fb fac8 	bl	800317c <_sbrk>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d102      	bne.n	8007bf6 <_sbrk_r+0x1a>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b103      	cbz	r3, 8007bf6 <_sbrk_r+0x1a>
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	20000ca4 	.word	0x20000ca4

08007bfc <__malloc_lock>:
 8007bfc:	4801      	ldr	r0, [pc, #4]	; (8007c04 <__malloc_lock+0x8>)
 8007bfe:	f000 b85d 	b.w	8007cbc <__retarget_lock_acquire_recursive>
 8007c02:	bf00      	nop
 8007c04:	20000ca8 	.word	0x20000ca8

08007c08 <__malloc_unlock>:
 8007c08:	4801      	ldr	r0, [pc, #4]	; (8007c10 <__malloc_unlock+0x8>)
 8007c0a:	f000 b858 	b.w	8007cbe <__retarget_lock_release_recursive>
 8007c0e:	bf00      	nop
 8007c10:	20000ca8 	.word	0x20000ca8

08007c14 <_free_r>:
 8007c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c16:	2900      	cmp	r1, #0
 8007c18:	d044      	beq.n	8007ca4 <_free_r+0x90>
 8007c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c1e:	9001      	str	r0, [sp, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f1a1 0404 	sub.w	r4, r1, #4
 8007c26:	bfb8      	it	lt
 8007c28:	18e4      	addlt	r4, r4, r3
 8007c2a:	f7ff ffe7 	bl	8007bfc <__malloc_lock>
 8007c2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ca8 <_free_r+0x94>)
 8007c30:	9801      	ldr	r0, [sp, #4]
 8007c32:	6813      	ldr	r3, [r2, #0]
 8007c34:	b933      	cbnz	r3, 8007c44 <_free_r+0x30>
 8007c36:	6063      	str	r3, [r4, #4]
 8007c38:	6014      	str	r4, [r2, #0]
 8007c3a:	b003      	add	sp, #12
 8007c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c40:	f7ff bfe2 	b.w	8007c08 <__malloc_unlock>
 8007c44:	42a3      	cmp	r3, r4
 8007c46:	d908      	bls.n	8007c5a <_free_r+0x46>
 8007c48:	6825      	ldr	r5, [r4, #0]
 8007c4a:	1961      	adds	r1, r4, r5
 8007c4c:	428b      	cmp	r3, r1
 8007c4e:	bf01      	itttt	eq
 8007c50:	6819      	ldreq	r1, [r3, #0]
 8007c52:	685b      	ldreq	r3, [r3, #4]
 8007c54:	1949      	addeq	r1, r1, r5
 8007c56:	6021      	streq	r1, [r4, #0]
 8007c58:	e7ed      	b.n	8007c36 <_free_r+0x22>
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	b10b      	cbz	r3, 8007c64 <_free_r+0x50>
 8007c60:	42a3      	cmp	r3, r4
 8007c62:	d9fa      	bls.n	8007c5a <_free_r+0x46>
 8007c64:	6811      	ldr	r1, [r2, #0]
 8007c66:	1855      	adds	r5, r2, r1
 8007c68:	42a5      	cmp	r5, r4
 8007c6a:	d10b      	bne.n	8007c84 <_free_r+0x70>
 8007c6c:	6824      	ldr	r4, [r4, #0]
 8007c6e:	4421      	add	r1, r4
 8007c70:	1854      	adds	r4, r2, r1
 8007c72:	42a3      	cmp	r3, r4
 8007c74:	6011      	str	r1, [r2, #0]
 8007c76:	d1e0      	bne.n	8007c3a <_free_r+0x26>
 8007c78:	681c      	ldr	r4, [r3, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	6053      	str	r3, [r2, #4]
 8007c7e:	4421      	add	r1, r4
 8007c80:	6011      	str	r1, [r2, #0]
 8007c82:	e7da      	b.n	8007c3a <_free_r+0x26>
 8007c84:	d902      	bls.n	8007c8c <_free_r+0x78>
 8007c86:	230c      	movs	r3, #12
 8007c88:	6003      	str	r3, [r0, #0]
 8007c8a:	e7d6      	b.n	8007c3a <_free_r+0x26>
 8007c8c:	6825      	ldr	r5, [r4, #0]
 8007c8e:	1961      	adds	r1, r4, r5
 8007c90:	428b      	cmp	r3, r1
 8007c92:	bf04      	itt	eq
 8007c94:	6819      	ldreq	r1, [r3, #0]
 8007c96:	685b      	ldreq	r3, [r3, #4]
 8007c98:	6063      	str	r3, [r4, #4]
 8007c9a:	bf04      	itt	eq
 8007c9c:	1949      	addeq	r1, r1, r5
 8007c9e:	6021      	streq	r1, [r4, #0]
 8007ca0:	6054      	str	r4, [r2, #4]
 8007ca2:	e7ca      	b.n	8007c3a <_free_r+0x26>
 8007ca4:	b003      	add	sp, #12
 8007ca6:	bd30      	pop	{r4, r5, pc}
 8007ca8:	20000c9c 	.word	0x20000c9c

08007cac <_malloc_usable_size_r>:
 8007cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cb0:	1f18      	subs	r0, r3, #4
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	bfbc      	itt	lt
 8007cb6:	580b      	ldrlt	r3, [r1, r0]
 8007cb8:	18c0      	addlt	r0, r0, r3
 8007cba:	4770      	bx	lr

08007cbc <__retarget_lock_acquire_recursive>:
 8007cbc:	4770      	bx	lr

08007cbe <__retarget_lock_release_recursive>:
 8007cbe:	4770      	bx	lr

08007cc0 <_init>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	bf00      	nop
 8007cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc6:	bc08      	pop	{r3}
 8007cc8:	469e      	mov	lr, r3
 8007cca:	4770      	bx	lr

08007ccc <_fini>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	bf00      	nop
 8007cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd2:	bc08      	pop	{r3}
 8007cd4:	469e      	mov	lr, r3
 8007cd6:	4770      	bx	lr
